<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小码侠</title>
  
  <subtitle>代码大侠</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wolferhua.github.io/"/>
  <updated>2020-02-14T05:48:10.376Z</updated>
  <id>https://wolferhua.github.io/</id>
  
  <author>
    <name>wolferhua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vagrant指南</title>
    <link href="https://wolferhua.github.io/2020/02/13/vagrant-guide-1/"/>
    <id>https://wolferhua.github.io/2020/02/13/vagrant-guide-1/</id>
    <published>2020-02-13T15:05:17.000Z</published>
    <updated>2020-02-14T05:48:10.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vagrant介绍"><a href="#Vagrant介绍" class="headerlink" title="Vagrant介绍"></a>Vagrant介绍</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p><code>Vagrant</code>是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它 使用Oracle的开源<code>VirtualBox</code>虚拟化系统，使用 Chef创建自动化虚拟环境。目前vagrant还可以使用<code>vmware</code>,<code>docker</code>……等十多种虚拟机提供服务，但是常用的还是<code>VirtualBox</code>。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p>在Vagrant体系中，有个box(箱子)的概念，这优点类似于docker体系中的image(镜像)，也可以理解为一个系统的安装包。基于同一个box，不同的人可以运行得到相同的内容。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>安装 <code>VirtualBox</code>：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a>；</li><li>安装 <code>Vagrant</code>：<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a>。</li></ol><blockquote><p>需要注意的是， <code>VirtualBox</code>版本一定要在 <code>Vagrant</code>版本支持的列表中，本文档用<code>Vagrant 2.2.7</code>支持<code>VirtualBox</code>： 4.0.x, 4.1.x, 4.2.x, 4.3.x, 5.0.x, 5.1.x, 5.2.x, 6.0.x, and 6.1.x. </p></blockquote><p>傻瓜式安装，下载对应系统版本的软件以后，一直点击下一步，下一步即可。这里就演示了。</p><h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><h2 id="一、创建目录"><a href="#一、创建目录" class="headerlink" title="一、创建目录"></a>一、创建目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 目录位置无所谓，没有具体要求。</span></span><br><span class="line">mkdir ubuntu1806</span><br><span class="line"><span class="built_in">cd</span> ubuntu1806</span><br></pre></td></tr></table></figure><h2 id="二、初始化"><a href="#二、初始化" class="headerlink" title="二、初始化"></a>二、初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vagrant init ubuntu/bionic64</span><br><span class="line"><span class="comment"># A `Vagrantfile` has been placed in this directory. You are now</span></span><br><span class="line"><span class="comment"># ready to `vagrant up` your first virtual environment! Please read</span></span><br><span class="line"><span class="comment"># the comments in the Vagrantfile as well as documentation on</span></span><br><span class="line"><span class="comment"># `vagrantup.com` for more information on using Vagrant.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 看一下目录里边有什么？</span></span><br><span class="line"></span><br><span class="line">ls -la</span><br><span class="line"><span class="comment"># total 8</span></span><br><span class="line"><span class="comment"># drwxr-xr-x  3 wolferhua  staff    96  2 13 15:32 .</span></span><br><span class="line"><span class="comment"># drwxr-xr-x  5 wolferhua  staff   160  2 13 15:31 ..</span></span><br><span class="line"><span class="comment"># -rw-r--r--  1 wolferhua  staff  3021  2 13 15:32 Vagrantfile</span></span><br></pre></td></tr></table></figure><p>可以发现，目录里边自动创建了一个<code>Vagrantfile</code>,我们看下里边内容：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### cat Vagrantfile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到内容比较多，但是大部分都是注释内容。我们暂时忽略掉它，一起来看下没有注释的内容。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span></span><br><span class="line"><span class="comment"># configures the configuration version (we support older styles for</span></span><br><span class="line"><span class="comment"># backwards compatibility). Please don't change it unless you know what</span></span><br><span class="line"><span class="comment"># you're doing.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## vagrent 配置对应版本 2， 表示对应 2.X 的版本。</span></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># The most common configuration options are documented and commented below.</span></span><br><span class="line">  <span class="comment"># For a complete reference, please see the online documentation at</span></span><br><span class="line">  <span class="comment"># https://docs.vagrantup.com.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Every Vagrant development environment requires a box. You can search for</span></span><br><span class="line">  <span class="comment"># boxes at https://vagrantcloud.com/search.</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">## 当前使用的box</span></span><br><span class="line">  config.vm.box = <span class="string">"ubuntu/bionic64"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Disable automatic box update checking. If you disable this, then</span></span><br><span class="line">  <span class="comment"># boxes will only be checked for updates when the user runs</span></span><br><span class="line">  <span class="comment"># `vagrant box outdated`. This is not recommended.</span></span><br><span class="line">  <span class="comment"># config.vm.box_check_update = false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine. In the example below,</span></span><br><span class="line">  <span class="comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span></span><br><span class="line">  <span class="comment"># <span class="doctag">NOTE:</span> This will enable public access to the opened port</span></span><br><span class="line">  <span class="comment"># config.vm.network "forwarded_port", guest: 80, host: 8080</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine and only allow access</span></span><br><span class="line">  <span class="comment"># via 127.0.0.1 to disable public access</span></span><br><span class="line">  <span class="comment"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a private network, which allows host-only access to the machine</span></span><br><span class="line">  <span class="comment"># using a specific IP.</span></span><br><span class="line">  <span class="comment"># config.vm.network "private_network", ip: "192.168.33.10"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a public network, which generally matched to bridged network.</span></span><br><span class="line">  <span class="comment"># Bridged networks make the machine appear as another physical device on</span></span><br><span class="line">  <span class="comment"># your network.</span></span><br><span class="line">  <span class="comment"># config.vm.network "public_network"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share an additional folder to the guest VM. The first argument is</span></span><br><span class="line">  <span class="comment"># the path on the host to the actual folder. The second argument is</span></span><br><span class="line">  <span class="comment"># the path on the guest to mount the folder. And the optional third</span></span><br><span class="line">  <span class="comment"># argument is a set of non-required options.</span></span><br><span class="line">  <span class="comment"># config.vm.synced_folder "../data", "/vagrant_data"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Provider-specific configuration so you can fine-tune various</span></span><br><span class="line">  <span class="comment"># backing providers for Vagrant. These expose provider-specific options.</span></span><br><span class="line">  <span class="comment"># Example for VirtualBox:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># config.vm.provider "virtualbox" do |vb|</span></span><br><span class="line">  <span class="comment">#   # Display the VirtualBox GUI when booting the machine</span></span><br><span class="line">  <span class="comment">#   vb.gui = true</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   # Customize the amount of memory on the VM:</span></span><br><span class="line">  <span class="comment">#   vb.memory = "1024"</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># View the documentation for the provider you are using for more</span></span><br><span class="line">  <span class="comment"># information on available options.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable provisioning with a shell script. Additional provisioners such as</span></span><br><span class="line">  <span class="comment"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span></span><br><span class="line">  <span class="comment"># documentation for more information about their specific syntax and use.</span></span><br><span class="line">  <span class="comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span></span><br><span class="line">  <span class="comment">#   apt-get update</span></span><br><span class="line">  <span class="comment">#   apt-get install -y apache2</span></span><br><span class="line">  <span class="comment"># SHELL</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>精简以后得到：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## vagrent 配置对应版本 2， 表示对应 2.X 的版本。</span></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment">## 当前使用的box</span></span><br><span class="line">  config.vm.box = <span class="string">"ubuntu/bionic64"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动的时候会下载box，可能非常慢。请耐心等待。如果失败请多次尝试。</span></span><br></pre></td></tr></table></figure><h2 id="四、登陆"><a href="#四、登陆" class="headerlink" title="四、登陆"></a>四、登陆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-76-generic x86_64)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  * Documentation:  https://help.ubuntu.com</span></span><br><span class="line"><span class="comment">#  * Management:     https://landscape.canonical.com</span></span><br><span class="line"><span class="comment">#  * Support:        https://ubuntu.com/advantage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   System information as of Thu Feb 13 09:01:34 UTC 2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   System load:  0.0               Processes:             97</span></span><br><span class="line"><span class="comment">#   Usage of /:   14.6% of 9.63GB   Users logged in:       0</span></span><br><span class="line"><span class="comment">#   Memory usage: 19%               IP address for enp0s3: 10.0.2.15</span></span><br><span class="line"><span class="comment">#   Swap usage:   0%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 packages can be updated.</span></span><br><span class="line"><span class="comment"># 0 updates are security updates.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *** System restart required ***</span></span><br><span class="line"><span class="comment"># Last login: Thu Feb 13 08:52:29 2020 from 10.0.2.2</span></span><br><span class="line"><span class="comment"># vagrant@ubuntu-bionic:~$</span></span><br></pre></td></tr></table></figure><p>然后就像操作自己安装的虚拟机一样去操作机器就可以了。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="box"><a href="#box" class="headerlink" title="box"></a>box</h2><ul><li>显示本地的所有box</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box list</span><br></pre></td></tr></table></figure><ul><li>添加box</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add box-name(box-url)</span><br></pre></td></tr></table></figure><ul><li>更新本地box</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box update box-name</span><br></pre></td></tr></table></figure><ul><li>删除本地box</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box remove box-name</span><br></pre></td></tr></table></figure><ul><li>重新打包本地box</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box repackage box-name</span><br></pre></td></tr></table></figure><ul><li>查找在线box</li></ul><p>官方网站： <a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>初始化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init [box-name]</span><br></pre></td></tr></table></figure><ul><li>启动虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure><ul><li>ssh登陆虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><ul><li>挂起虚拟机（休眠）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant <span class="built_in">suspend</span></span><br></pre></td></tr></table></figure><ul><li>重启虚拟机 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure><ul><li>关闭虚拟机 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant halt</span><br></pre></td></tr></table></figure><ul><li>查看运行状态 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant status</span><br></pre></td></tr></table></figure><ul><li>销毁虚拟机 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure><h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><h2 id="虚拟机配置-config-vm"><a href="#虚拟机配置-config-vm" class="headerlink" title="虚拟机配置 config.vm"></a>虚拟机配置 <code>config.vm</code></h2><ul><li><code>config.vm.box</code>：配置虚拟机使用的box</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.box = <span class="string">"ubuntu/bionic64"</span></span><br></pre></td></tr></table></figure><ul><li><code>config.vm.hostname</code>：配置虚拟机主机名</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.hostname=<span class="string">"server-master"</span></span><br></pre></td></tr></table></figure><ul><li><code>config.vm.synced_folder</code>：除了默认的目录绑定外，还可以手动指定绑定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个参数是宿主机的目录，第二个参数是虚拟机挂载的目录。</span></span><br><span class="line"> config.vm.synced_folder <span class="string">"/home/wolferhua"</span>, <span class="string">"/home/www/"</span></span><br></pre></td></tr></table></figure><ul><li><code>config.vm.network</code>：这是配置虚拟机网络</li></ul><p>Vagrant的网络连接方式有三种：</p><ol><li><code>NAT</code> : 缺省创建，用于让vm可以通过host转发访问局域网甚至互联网。</li><li><code>host-only</code> : 只有主机可以访问vm，其他机器无法访问它。</li><li><code>bridge</code> : 此模式下vm就像局域网中的一台独立的机器，可以被其他机器访问。</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Host-only模式</span></span><br><span class="line">config.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.10.12"</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Bridge模式</span></span><br><span class="line">config.vm.network <span class="string">"public_network"</span>, <span class="symbol">ip:</span> <span class="string">"10.1.2.3"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置当前vm的host-only网络的IP地址为192.168.33.10</span></span><br><span class="line">config.vm.network <span class="symbol">:private_network</span>, <span class="symbol">ip:</span> <span class="string">"192.168.33.10"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#host-only 模式的IP可以不指定，而是采用dhcp自动生成的方式，如 :</span></span><br><span class="line">config.vm.network <span class="string">"private_network"</span>, <span class="symbol">type:</span> <span class="string">"dhcp”</span></span><br></pre></td></tr></table></figure><p><strong>端口转发：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network :forwarded_port, guest: 80, host: 8080</span><br><span class="line"></span><br><span class="line"><span class="comment">#  上面的配置把宿主机上的8080端口映射到客户虚拟机的80端口，例如你在虚拟机上使用nginx跑了一个Go应用，那么你在host上的浏览器中打开http://localhost:8080时，Vagrant就会把这个请求转发到虚拟机里跑在80端口的nginx服务上。不建议使用该方法，因为涉及端口占用问题，常常导致应用之间不能正常通信，建议使用Host-only和Bridge方式进行设置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># guest和host是必须的，还有几个可选属性：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ● guest_ip：字符串，vm指定绑定的Ip，缺省为0.0.0.0</span></span><br><span class="line"><span class="comment"># ● host_ip：字符串，host指定绑定的Ip，缺省为0.0.0.0</span></span><br><span class="line"><span class="comment"># ● protocol：字符串，可选TCP或UDP，缺省为TCP</span></span><br></pre></td></tr></table></figure><h3 id="vm-节点配置-一个节点就是一个虚拟机"><a href="#vm-节点配置-一个节点就是一个虚拟机" class="headerlink" title="vm 节点配置(一个节点就是一个虚拟机)"></a>vm 节点配置(一个节点就是一个虚拟机)</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line"> </span><br><span class="line">  config.vm.define <span class="string">"web"</span> <span class="keyword">do</span> <span class="params">|web|</span></span><br><span class="line">    web.vm.box = <span class="string">"nginx"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">  config.vm.define <span class="string">"db"</span> <span class="keyword">do</span> <span class="params">|db|</span></span><br><span class="line">    db.vm.box = <span class="string">"mysql"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>当定义了多主机之后，在使用vagrant命令的时候，就需要加上主机名，例如vagrant ssh web；也有一些命令，如果你不指定特定的主机，那么将会对所有的主机起作用，比如vagrant up；你也可以使用表达式指定特定的主机名，例如vagrant up /follower[0-9]/。 </p><ul><li><code>config.vm.provider</code> 虚机容器提供者配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">config.vm.provider :virtualbox <span class="keyword">do</span> |vb|</span><br><span class="line"></span><br><span class="line">    <span class="comment">#指定vm-name，也就是virtualbox管理控制台中的虚机名称。如果不指定该选项会生成一个随机的名字，不容易区分。</span></span><br><span class="line">    vb.name = <span class="string">"ubuntu1804"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># vagrant up启动时，是否自动打开virtual box的窗口，缺省为false</span></span><br><span class="line">    vb.gui = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#指定vm内存，单位为MB</span></span><br><span class="line">    vb.memory = <span class="string">"1024"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设置CPU个数 </span></span><br><span class="line">    vb.cpus = 2</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><code>config.vm.provision</code> 让vagrant在启动虚拟机的时候自动执行，我们可以通过这个配置在虚拟机第一次启动的时候进行一些安装配置,这样你就可以省去手动配置环境的时间了。</li></ul><p><strong>脚本何时会被执行:</strong></p><ul><li>第一次执行vagrant up命令</li><li>执行vagrant provision命令</li><li>执行vagrant reload –provision或者vagrant up –provision命令</li><li>你也可以在启动虚拟机的时候添加–no-provision参数以阻止脚本被执行</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 启动时执行shell</span></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># ... other configuration</span></span><br><span class="line">  config.vm.provision <span class="string">"shell"</span>, <span class="symbol">inline:</span> <span class="string">"echo hello"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># ... other configuration</span></span><br><span class="line">  config.vm.provision <span class="string">"shell"</span>, <span class="symbol">inline:</span> &lt;&lt;SCRIPT</span><br><span class="line">echo I am provisioning... </span><br><span class="line">SCRIPT</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种写法</span></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># ... other configuration</span></span><br><span class="line"></span><br><span class="line">  config.vm.provision <span class="string">"shell"</span> <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">    s.inline = <span class="string">"echo hello"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为任务取一个名字， 启动时默认不执行</span></span><br><span class="line"><span class="comment"># 通过命令 vagrant provision --provision-with bootstrap 可以调用</span></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  config.vm.provision <span class="string">"bootstrap"</span>, <span class="symbol">type:</span> <span class="string">"shell"</span>, <span class="symbol">run:</span> <span class="string">"never"</span> <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">    s.inline = <span class="string">"echo hello"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  脚本执行</span></span><br><span class="line"></span><br><span class="line">config.vm.provision <span class="string">"shell"</span>, <span class="symbol">path:</span> <span class="string">"script.sh"</span></span><br></pre></td></tr></table></figure><h2 id="ssh配置-config-ssh"><a href="#ssh配置-config-ssh" class="headerlink" title="ssh配置 config.ssh"></a>ssh配置 <code>config.ssh</code></h2><ul><li><code>config.ssh.username</code>：默认的用户是vagrant，从官方下载的box往往使用的是这个用户名。如果是自定制的box，所使用的用户名可能会有所不同，通过这个配置设定所用的用户名。</li></ul><h1 id="批量配置"><a href="#批量配置" class="headerlink" title="批量配置"></a>批量配置</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义一组服务器</span></span><br><span class="line">app_servers = &#123;</span><br><span class="line">    <span class="symbol">:service1</span> =&gt; <span class="string">'192.168.33.20'</span>,</span><br><span class="line">    <span class="symbol">:service2</span> =&gt; <span class="string">'192.168.33.21'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#遍历app_servers map，将key和value分别赋值给app_server_name和app_server_ip</span></span><br><span class="line">    app_servers.each <span class="keyword">do</span> <span class="params">|app_server_name, app_server_ip|</span></span><br><span class="line">        <span class="comment">#针对每一个app_server_name，来配置config.vm.define配置节点，命名为app_config</span></span><br><span class="line">        config.vm.define app_server_name <span class="keyword">do</span> <span class="params">|app_config|</span></span><br><span class="line">            <span class="comment"># 此处配置，参考config.vm.define</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>也可以用下边的方案，不定义服务器。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">3</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        config.vm.define <span class="string">"app-<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        app_config.vm.hostname = <span class="string">"app-<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        app_config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|vb|</span></span><br><span class="line">            vb.name = app-<span class="comment">#&#123;i&#125;</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>修改完Vagrantfile的配置后，记得要重启虚拟机，才能使用虚拟机更新后的配置。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vagrant介绍&quot;&gt;&lt;a href=&quot;#Vagrant介绍&quot; class=&quot;headerlink&quot; title=&quot;Vagrant介绍&quot;&gt;&lt;/a&gt;Vagrant介绍&lt;/h1&gt;&lt;h2 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="linux" scheme="https://wolferhua.github.io/categories/linux/"/>
    
      <category term="vagrant" scheme="https://wolferhua.github.io/categories/linux/vagrant/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
      <category term="vagrant" scheme="https://wolferhua.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 4.5 MicroAPI 之 meta*</title>
    <link href="https://wolferhua.github.io/2020/02/12/go-micro-book4-5/"/>
    <id>https://wolferhua.github.io/2020/02/12/go-micro-book4-5/</id>
    <published>2020-02-12T06:47:44.000Z</published>
    <updated>2020-02-12T06:47:44.589Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>meta</code>，并无此模式，只是对<code>api</code>、<code>rpc</code>、<code>proxy</code>、<code>web</code>等模式的扩展使用方法.</p></blockquote><p>既然是在对<code>api</code>、<code>rpc</code>、<code>proxy</code>、<code>web</code>等模式进行拓展，所以我们就对之前的<code>api</code>进行一次改造。</p><h1 id="编写Meta"><a href="#编写Meta" class="headerlink" title="编写Meta"></a>编写Meta</h1><h2 id="改造部分代码"><a href="#改造部分代码" class="headerlink" title="改造部分代码"></a>改造部分代码</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需改造注册处理器的代码。</span></span><br><span class="line">api1.RegisterApi1Handler(service.Server(), <span class="built_in">new</span>(handler.Api1),</span><br><span class="line">    api.WithEndpoint(</span><br><span class="line">        &amp;api.Endpoint&#123;</span><br><span class="line">            <span class="comment">// 接口方法，一定要在proto接口中存在，不能是类的自有方法</span></span><br><span class="line">            Name:    <span class="string">"Api1.Get"</span>,</span><br><span class="line">            <span class="comment">// 该接口使用的API转发模式</span></span><br><span class="line">            Handler: rpc.Handler, </span><br><span class="line">            <span class="comment">// 支持的请求方法</span></span><br><span class="line">            Method:  []<span class="keyword">string</span>&#123;<span class="string">"GET"</span>&#125;,</span><br><span class="line">            <span class="comment">// http请求路由 </span></span><br><span class="line">            Path:    []<span class="keyword">string</span>&#123;<span class="string">"/api1"</span>&#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    api.WithEndpoint(</span><br><span class="line">        &amp;api.Endpoint&#123;</span><br><span class="line">            Name:    <span class="string">"Api1.Post"</span>,</span><br><span class="line">            Handler: rpc.Handler,</span><br><span class="line">            Host:    <span class="literal">nil</span>,</span><br><span class="line">            Method:  []<span class="keyword">string</span>&#123;<span class="string">"POST"</span>&#125;,</span><br><span class="line">            Path:    []<span class="keyword">string</span>&#123;<span class="string">"/api1"</span>&#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/meta1/handler"</span></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/meta1/proto/api1"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/api"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/api/handler/rpc"</span></span><br><span class="line"></span><br><span class="line">micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建新服务</span></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">"com.anycps.wolferhua.api.api1"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">service.Init()</span><br><span class="line"><span class="comment">// 只需改造注册处理器的代码。</span></span><br><span class="line">api1.RegisterApi1Handler(service.Server(), <span class="built_in">new</span>(handler.Api1),</span><br><span class="line">api.WithEndpoint(</span><br><span class="line">&amp;api.Endpoint&#123;</span><br><span class="line"><span class="comment">// 接口方法，一定要在proto接口中存在，不能是类的自有方法</span></span><br><span class="line">Name:    <span class="string">"Api1.Get"</span>,</span><br><span class="line"><span class="comment">// 该接口使用的API转发模式</span></span><br><span class="line">Handler: rpc.Handler,</span><br><span class="line"><span class="comment">// 支持的请求方法</span></span><br><span class="line">Method:  []<span class="keyword">string</span>&#123;<span class="string">"GET"</span>&#125;,</span><br><span class="line"><span class="comment">// http请求路由</span></span><br><span class="line">Path:    []<span class="keyword">string</span>&#123;<span class="string">"/api1"</span>&#125;,</span><br><span class="line">&#125;),</span><br><span class="line">api.WithEndpoint(</span><br><span class="line">&amp;api.Endpoint&#123;</span><br><span class="line">Name:    <span class="string">"Api1.Post"</span>,</span><br><span class="line">Handler: rpc.Handler,</span><br><span class="line">Host:    <span class="literal">nil</span>,</span><br><span class="line">Method:  []<span class="keyword">string</span>&#123;<span class="string">"POST"</span>&#125;,</span><br><span class="line">Path:    []<span class="keyword">string</span>&#123;<span class="string">"/api1"</span>&#125;,</span><br><span class="line">&#125;),</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 执行服务</span></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>因为我们在<code>api</code>中调用了服务，所以需要启动它，如果你在操作时省去了服务调用环节，可以不用启动它，不是必须的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> srv1 </span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><h3 id="启动网关"><a href="#启动网关" class="headerlink" title="启动网关"></a>启动网关</h3><p>网关的概念，上一张我们讲到过，不清楚的可以看一下：<a href="/2020/02/04/go-micro-book4/">Go-Micro学习笔记 - 4. MicroAPI(API网关)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">micro api --namespace com.anycps.wolferhua.api --handler api</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] Registering API Default Handler at /</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] HTTP API Listening on [::]:8080</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] Starting [service] go.micro.api</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] Server [grpc] Listening on [::]:33951</span></span><br></pre></td></tr></table></figure><p><strong>参数解释：</strong></p><ul><li><strong>–namespace：</strong> 指定命名空间，只有在这个命名空间以内的服务才可以被访问。</li><li><strong>–handler：</strong> 指定服务类型，这里指定的是<code>api</code>,上一章我们讲过handler的类型。</li></ul><h3 id="启动api"><a href="#启动api" class="headerlink" title="启动api"></a>启动api</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> api1</span><br><span class="line">go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2020-02-05 17:03:23 Starting [service] com.anycps.wolferhua.api.api1</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:03:23 Server [grpc] Listening on [::]:43785</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:03:23 Registry [mdns] Registering node: com.anycps.wolferhua.api.api1-3c0fd6b3-9e19-4c4b-ba12-a217ee15492c</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">micro list services                                         </span><br><span class="line"><span class="comment"># com.anycps.wolferhua.api.api1 # api 服务</span></span><br><span class="line"><span class="comment"># com.anycps.wolferhua.srv1 # 服务</span></span><br><span class="line"><span class="comment"># go.micro.api  # 网关</span></span><br></pre></td></tr></table></figure><h4 id="访问api"><a href="#访问api" class="headerlink" title="访问api"></a>访问api</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原始调用方式</span></span><br><span class="line">curl <span class="string">'http://localhost:8080/api1/get?name=wolferhua'</span>  </span><br><span class="line"><span class="comment">###### 新指定路由调用方式 ######</span></span><br><span class="line">curl <span class="string">'http://localhost:8080/api1?name=wolferhua'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;"message":"我们已经收到你的请求，Hello wolferhua ,from pid 10086"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始调用方式</span></span><br><span class="line">curl http://localhost:8080/api1 -X POST -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"name":"wolferhua"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###### 新指定路由调用方式 ######</span></span><br><span class="line">curl http://localhost:8080/api1/post -X POST -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"name":"wolferhua"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收到消息：&#123;"name":"wolferhua"&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;meta&lt;/code&gt;，并无此模式，只是对&lt;code&gt;api&lt;/code&gt;、&lt;code&gt;rpc&lt;/code&gt;、&lt;code&gt;proxy&lt;/code&gt;、&lt;code&gt;web&lt;/code&gt;等模式的扩展使用方法.&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 4.4 MicroAPI 之 event</title>
    <link href="https://wolferhua.github.io/2020/02/10/1go-micro-book4-4/"/>
    <id>https://wolferhua.github.io/2020/02/10/1go-micro-book4-4/</id>
    <published>2020-02-10T11:30:59.000Z</published>
    <updated>2020-02-11T09:35:09.990Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>event</code> <code>API</code>会把http请求映射到匹配的事件处理服务上.</p></blockquote><h1 id="编写Event"><a href="#编写Event" class="headerlink" title="编写Event"></a>编写Event</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight golang"><figcaption><span>event1/main.go</span><a href="/downloads/code/go-micro-demo/demo001/event1/main.go">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line">proto <span class="string">"github.com/micro/go-micro/v2/api/proto"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切记，事件订阅结构的所有公有方法都会被执行，方法名没有限制，但是方法一定要接收ctx，event</span></span><br><span class="line"><span class="keyword">type</span> Event1 <span class="keyword">struct</span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Event1)</span> <span class="title">Handler</span><span class="params">(ctx context.Context, event *proto.Event)</span> <span class="title">error</span></span> {</span><br><span class="line">log.Info( <span class="string">"公有方法Handler Id，"</span>, event.Id)</span><br><span class="line">log.Log(<span class="string">"公有方法Handler 收到事件，"</span>, event.Name)</span><br><span class="line">log.Log(<span class="string">"公有方法Handler 数据"</span>, event.Data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Event1)</span> <span class="title">Handler1</span><span class="params">(ctx context.Context, event *proto.Event)</span> <span class="title">error</span></span> {</span><br><span class="line">log.Info( <span class="string">"公有方法Handler1 Id，"</span>, event.Id)</span><br><span class="line">log.Log(<span class="string">"公有方法Handler1 收到事件，"</span>, event.Name)</span><br><span class="line">log.Log(<span class="string">"公有方法Handler1 数据，"</span>, event.Data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">打开本注释后，会导致侦听器无法工作。方法一定要接收ctx，event才能正常运行。</span></span><br><span class="line"><span class="comment">func (e *Event1) Handler2() error {</span></span><br><span class="line"><span class="comment">    log.Log("公有方法Handler2 收到事件，不解析参数")</span></span><br><span class="line"><span class="comment">    return nil</span></span><br><span class="line"><span class="comment">}**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Event1)</span> <span class="title">handler</span><span class="params">(ctx context.Context, event *proto.Event)</span> <span class="title">error</span></span> {</span><br><span class="line">log.Log(<span class="string">"私有方法 handler，收到事件，"</span>, event.Name)</span><br><span class="line">log.Log(<span class="string">"私有方法 handler，数据"</span>, event.Data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">service := micro.NewService(</span><br><span class="line"><span class="comment">// 服务名可以随意</span></span><br><span class="line">micro.Name(<span class="string">"event1"</span>), <span class="comment">// 在event 处理器里边关注的是 topic 的名称，服务名称不用在意。</span></span><br><span class="line">)</span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">micro.RegisterSubscriber(<span class="string">"com.anycps.wolferhua.api.event1"</span>, service.Server(), <span class="built_in">new</span>(Event1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> {</span><br><span class="line">log.Fatal(err)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># mod 操作</span></span><br><span class="line">go mod init</span><br><span class="line">go mod tidy</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><blockquote><p>我们监听的事件是: <code>com.anycps.wolferhua.api.event1</code>,所以我们需要使用<code>--namespace com.anycps.wolferhua.api</code>，这里的名称和<code>micro.Name(&quot;event1&quot;)</code>无关。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># API</span></span><br><span class="line">micro api --namespace com.anycps.wolferhua.api --handler event</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> curl http://localhost:8080/web1/get</span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 服务端日志输出。=================</span></span><br><span class="line"><span class="comment"># 2020-02-11 17:17:03 com.anycps.wolferhua.api.web1-get-0caa89fe-7d1a-4e1f-b058-ae7fb5d11ece</span></span><br><span class="line"><span class="comment"># 2020-02-11 17:17:03 公有方法Process2 收到事件，get</span></span><br><span class="line"><span class="comment"># 2020-02-11 17:17:03 公有方法Process 收到事件，get</span></span><br><span class="line"><span class="comment"># 2020-02-11 17:17:03 公有方法Process 数据&#123;&#125;</span></span><br><span class="line"><span class="comment"># 2020-02-11 17:17:03 公有方法Process2 数据，&#123;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说<code>event</code>和<code>rpc</code>、<code>api</code>，有些相似。我们来对比下</p><ol><li><code>api</code> 需要定义每一个服务名称对应的方法和参数，<code>event</code>可以通过事件名称获取。比如上边的方法名可以理解为<code>Event1.Get</code>。</li><li><code>api</code> 每一个服务只有一个响应方法，<code>event</code> 可以有多个。</li><li><code>api</code> 可以响应返回数据，<code>event</code> 不可以。所以<code>event</code> 可以用作一些无需要返回数据的业务，如日志提交接口。</li></ol><p>其他差异需要你们细细去对比了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;event&lt;/code&gt; &lt;code&gt;API&lt;/code&gt;会把http请求映射到匹配的事件处理服务上.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;编写Event&quot;&gt;&lt;a href=&quot;#编写Event&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 4.3 MicroAPI 之 web 、http</title>
    <link href="https://wolferhua.github.io/2020/02/10/2go-micro-book4-3/"/>
    <id>https://wolferhua.github.io/2020/02/10/2go-micro-book4-3/</id>
    <published>2020-02-10T11:30:59.000Z</published>
    <updated>2020-02-11T09:35:13.750Z</updated>
    
    <content type="html"><![CDATA[<p>经过之前的学习，我们已经学会了<code>api</code>,<code>rpc</code>处理器的开发。但是使用发现，这两种处理器是一对一注册的，路由配置比较麻烦（mate*处理器的时候讲）。所以我们今天将回到我们之前的开发模式来开发服务。</p><blockquote><p><code>web</code>和<code>http</code>都具有相同的能力，但是<code>http</code>不支持转发<code>websocket</code>。</p></blockquote><h1 id="编写Web"><a href="#编写Web" class="headerlink" title="编写Web"></a>编写Web</h1><h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><figure class="highlight golang"><figcaption><span>web1/main.go</span><a href="/downloads/code/go-micro-demo/demo001/web1/main.go">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gorilla/websocket"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/transport/grpc"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/web"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// websocket 服务</span></span><br><span class="line"><span class="keyword">var</span> upgrader = websocket.Upgrader{CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span> <span class="title">bool</span></span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sysName = <span class="string">`系统通知：`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息列表</span></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> {</span><br><span class="line">Code    <span class="keyword">int</span>    <span class="string">`json:"code"`</span></span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">Type    <span class="keyword">int</span>    <span class="string">`json:"type"`</span></span><br><span class="line">Message <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages = <span class="built_in">make</span>(<span class="keyword">chan</span> *Message, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connections = <span class="keyword">map</span>[<span class="keyword">string</span>]*websocket.Conn{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">// 这里使用的是go-micro web 包，因为它已经实现了服务注册，和发现的能力。不需要我们再去处理了。</span></span><br><span class="line">service := web.NewService(</span><br><span class="line">web.Name(<span class="string">"com.anycps.wolferhua.api.web1"</span>),</span><br><span class="line">web.MicroService(micro.NewService(micro.Transport(grpc.NewTransport()))),</span><br><span class="line">)</span><br><span class="line">service.Options().Service.Client()</span><br><span class="line"><span class="comment">// 初始化服务</span></span><br><span class="line"><span class="keyword">if</span> err := service.Init(); err != <span class="literal">nil</span> {</span><br><span class="line">log.Fatal(<span class="string">"Init"</span>, err)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由注册</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册静态资源目录（页面）</span></span><br><span class="line">service.Handle(<span class="string">"/web1/"</span>, http.StripPrefix(<span class="string">"/web1/"</span>, http.FileServer(http.Dir(<span class="string">"html"</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册websocket监听（socket）</span></span><br><span class="line">service.HandleFunc(<span class="string">"/web1/ws"</span>, ws)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户列表接口（接口）</span></span><br><span class="line">service.HandleFunc(<span class="string">"/web1/ws/users"</span>, users)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> wsSend()</span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> {</span><br><span class="line">log.Fatal(<span class="string">"Run: "</span>, err)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户列表接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">users</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> {</span><br><span class="line"><span class="comment">// 读取列表</span></span><br><span class="line">list := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(connections))</span><br><span class="line"><span class="keyword">for</span> name, _ := <span class="keyword">range</span> connections {</span><br><span class="line">list = <span class="built_in">append</span>(list, name)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 返回数据</span></span><br><span class="line"></span><br><span class="line">w.Header().Add(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>)</span><br><span class="line"></span><br><span class="line">w.WriteHeader(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">data, _ := json.Marshal(list)</span><br><span class="line">w.Write(data)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// websocket 服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ws</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> {</span><br><span class="line">vals, err := url.ParseQuery(r.URL.RawQuery)</span><br><span class="line">name := strings.TrimSpace(vals.Get(<span class="string">"name"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(vals.Get("name"))</span></span><br><span class="line"></span><br><span class="line">c, err := upgrader.Upgrade(w, r, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">log.Errorf(<span class="string">"upgrade: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断内容</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(name) &lt; <span class="number">1</span> {</span><br><span class="line"><span class="comment">// 返回错误信息</span></span><br><span class="line"><span class="comment">// http.Error(w, `{"code":500,"message":"请输入名称！"}`, 500)</span></span><br><span class="line">c.WriteMessage(websocket.TextMessage, []<span class="keyword">byte</span>(<span class="string">`{"code":500,"message":"请输入名称！"}`</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 验证重复状态</span></span><br><span class="line"><span class="keyword">if</span> _, ok := connections[name]; ok {</span><br><span class="line"><span class="comment">// 返回错误信息</span></span><br><span class="line"><span class="comment">// http.Error(w, `{"code":500,"message":"请输入名称！"}`, 500)</span></span><br><span class="line">c.WriteMessage(websocket.TextMessage, []<span class="keyword">byte</span>(<span class="string">`{"code":501,"message":"名称已经存在了！"}`</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出客户列表</span></span><br><span class="line"><span class="built_in">delete</span>(connections, name)</span><br><span class="line"></span><br><span class="line">messages &lt;- &amp;Message{Type: websocket.TextMessage, Code: <span class="number">119</span>, Name: sysName, Message: <span class="string">` `</span> + name + <span class="string">` 退出了 `</span>}</span><br><span class="line"><span class="comment">// 关闭链接</span></span><br><span class="line">c.Close()</span><br><span class="line">}()</span><br><span class="line">connections[name] = c</span><br><span class="line">messages &lt;- &amp;Message{Type: websocket.TextMessage, Code: <span class="number">120</span>, Name: sysName, Message: <span class="string">` `</span> + name + <span class="string">` 上线了 `</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> {</span><br><span class="line"><span class="comment">// 读取消息</span></span><br><span class="line">mt, message, err := c.ReadMessage()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">log.Error(<span class="string">"read:"</span>, err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">log.Errorf(<span class="string">"recv: %s"</span>, message)</span><br><span class="line"><span class="comment">// 写入消息列表</span></span><br><span class="line">messages &lt;- &amp;Message{Name: name, Code: <span class="number">200</span>, Type: mt, Message: <span class="keyword">string</span>(message)}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息消费</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wsSend</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">// 读取消息</span></span><br><span class="line"><span class="keyword">for</span> message := <span class="keyword">range</span> messages {</span><br><span class="line"><span class="comment">// 遍历发给所有人。</span></span><br><span class="line"><span class="keyword">for</span> name, conn := <span class="keyword">range</span> connections {</span><br><span class="line"><span class="keyword">if</span> conn != <span class="literal">nil</span> {</span><br><span class="line">err := conn.WriteJSON(message)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">log.Error(<span class="string">"send to "</span>, name, <span class="string">"err :"</span>, err)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="前端界面"><a href="#前端界面" class="headerlink" title="前端界面"></a>前端界面</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><figcaption><span>web1/html/index.html</span><a href="/downloads/code/go-micro-demo/demo001/web1/html/index.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Go Web1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body {</span><br><span class="line">            padding-top: 100px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main-body</span> &gt; <span class="selector-class">.row</span> {</span></span><br><span class="line">            margin-top: 30px;</span><br><span class="line">            margin-bottom: 30px;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.message-box</span>{</span></span><br><span class="line">            padding: 30px;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-xl main-body border"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row message-row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col "</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--消息显示框框--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid border message-box"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted text-center"</span>&gt;</span>欢迎使用。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2 border"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>在线用户列表：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group user-list"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--显示用户列表--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row "</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--消息输入框--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">rows</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发送按钮--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"send-but"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/lodash@4.17.15/lodash.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha256-VeNaFBVDhoX3H+gJ37DpT/nTuZTdjYro9yBruHjVmoQ="</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><figure class="highlight javascript"><figcaption><span>web1/html/index.js</span><a href="/downloads/code/go-micro-demo/demo001/web1/html/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//alert("message")</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> sessionKey = <span class="string">'name'</span>;</span><br><span class="line">    <span class="keyword">const</span> host = <span class="built_in">window</span>.location.host;</span><br><span class="line">    <span class="keyword">const</span> wsUrl = <span class="string">"ws://"</span> + host + <span class="string">"/web1/ws?name="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> $messageBox = $(<span class="string">".message-box"</span>); <span class="comment">//消息框</span></span><br><span class="line">    <span class="keyword">let</span> $message = $(<span class="string">"#message"</span>); <span class="comment">//消息内容</span></span><br><span class="line">    <span class="keyword">let</span> $sendBut = $(<span class="string">"#send-but"</span>); <span class="comment">//消息按钮</span></span><br><span class="line">    <span class="keyword">let</span> $userList = $(<span class="string">".user-list"</span>);<span class="comment">//用户列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ws = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户名称</span></span><br><span class="line">    <span class="keyword">let</span> name = sessionStorage.getItem(sessionKey);<span class="comment">// 如果存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载用户列表</span></span><br><span class="line">    <span class="keyword">let</span> loadUserList = _.debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="comment">//console.log($)</span></span><br><span class="line">        $.ajax({</span><br><span class="line">            url:<span class="string">'/web1/ws/users'</span>,</span><br><span class="line">            dataType:<span class="string">'json'</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>{</span><br><span class="line">                <span class="comment">//console.log(ret);</span></span><br><span class="line">                <span class="comment">// 渲染消息数据</span></span><br><span class="line">                <span class="keyword">let</span> $warp = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> ret){</span><br><span class="line">                    $warp.append(<span class="string">'&lt;li class="list-group-item" data-name="'</span>+ret[i]+<span class="string">'"&gt;'</span>+ret[i]+<span class="string">'&lt;/li&gt;'</span>)</span><br><span class="line">                }</span><br><span class="line">                $userList.html($warp.html());</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    },<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示消息</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">writeMessage</span>(<span class="params">content</span>) </span>{</span><br><span class="line">        <span class="keyword">let</span> item = $(<span class="string">'&lt;div class="col"&gt;&lt;/div&gt;'</span>);</span><br><span class="line">        item.html(content);</span><br><span class="line">        writeMessageRow(item);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">writeMessageRow</span>(<span class="params">content</span>) </span>{</span><br><span class="line">        <span class="keyword">let</span> item = $(<span class="string">'&lt;div class="row"&gt;&lt;/div&gt;'</span>);</span><br><span class="line">        item.html(content);</span><br><span class="line">        $messageBox.append(item);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 名称输入提示</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">namePrompt</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="comment">// 没有存储名称。</span></span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            name = <span class="built_in">window</span>.prompt(<span class="string">"请输入名称："</span>);</span><br><span class="line">            name = name.trim();</span><br><span class="line">            <span class="comment">// 存入本地存储</span></span><br><span class="line">            sessionStorage.setItem(sessionKey, name);</span><br><span class="line">        } <span class="keyword">while</span> (!name)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链接服务器</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connectServer</span>(<span class="params"></span>) </span>{</span><br><span class="line">        ws = <span class="keyword">new</span> WebSocket(wsUrl + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 事件监听</span></span><br><span class="line">        ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>{</span><br><span class="line">            writeMessage(<span class="string">'&lt;p class="text-success text-center"&gt;与服务器链接已经建立。&lt;/p&gt;'</span>);</span><br><span class="line">            loadUserList();</span><br><span class="line">        };</span><br><span class="line">        ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>{</span><br><span class="line">            writeMessage(<span class="string">'&lt;p class="text-danger text-center"&gt;链接断开，请重新链接。&lt;/p&gt;'</span>);</span><br><span class="line">            ws = <span class="literal">null</span>;</span><br><span class="line">        };</span><br><span class="line">        ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>{</span><br><span class="line">            <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(evt.data);</span><br><span class="line">            <span class="keyword">if</span> (!data || !data.code || !data.message) <span class="keyword">return</span>; <span class="comment">// 消息体不匹配</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (data.code &gt;= <span class="number">500</span>) {</span><br><span class="line">                <span class="comment">// 系统异常消息：退出，并关闭链接</span></span><br><span class="line">                sessionStorage.removeItem(sessionKey);</span><br><span class="line">                writeMessage(<span class="string">'&lt;p class="text-danger text-center"&gt;'</span> + data.message + <span class="string">'&lt;/p&gt;'</span>);</span><br><span class="line">                ws = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (data.code &gt;= <span class="number">200</span>) {</span><br><span class="line">                <span class="comment">// 用户消息。显示消息内容</span></span><br><span class="line">                <span class="keyword">var</span> message = <span class="string">''</span>;</span><br><span class="line">                <span class="keyword">if</span> (data.name == name) {</span><br><span class="line">                    <span class="comment">//本人发送消息</span></span><br><span class="line">                    message += <span class="string">'&lt;div class="col-auto"&gt;&lt;p class="text-success"&gt;'</span> + data.name + <span class="string">'&lt;/p&gt;&lt;/div&gt;'</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">//其他人发送消息</span></span><br><span class="line">                    message += <span class="string">'&lt;div class="col-auto"&gt;&lt;p class="text-muted"&gt;'</span> + data.name + <span class="string">'&lt;/p&gt;&lt;/div&gt;'</span></span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                message += <span class="string">'&lt;div class="col"&gt;'</span> + data.message + <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">                writeMessageRow(message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 系统通知消息</span></span><br><span class="line">            <span class="keyword">if</span> (data.code &gt;= <span class="number">100</span>) {</span><br><span class="line">                writeMessage(<span class="string">'&lt;p class="text-muted  text-center"&gt;'</span> + data.message + <span class="string">'&lt;/p&gt;'</span>);</span><br><span class="line">                loadUserList();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        };</span><br><span class="line">        ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>{</span><br><span class="line">            writeMessage(<span class="string">'&lt;p class="text-danger text-center"&gt;服务器错误，请重新链接。&lt;/p&gt;'</span>);</span><br><span class="line">            ws = <span class="literal">null</span>;</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节流函数，防止重复点击。</span></span><br><span class="line">    <span class="keyword">let</span> send = _.debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> content = $message.val().trim();</span><br><span class="line">        <span class="keyword">if</span> (!content) {</span><br><span class="line">            alert(<span class="string">'请输入内容！'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (ws == <span class="literal">null</span>) {</span><br><span class="line">            namePrompt();</span><br><span class="line">            connectServer();</span><br><span class="line">        }</span><br><span class="line">        ws.send(content);</span><br><span class="line">        $message.val(<span class="string">''</span>);</span><br><span class="line">        $message.focus();</span><br><span class="line">    }, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回车键发送消息</span></span><br><span class="line">    $message.keypress(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) {</span><br><span class="line">            <span class="comment">// 阻止事件冒泡</span></span><br><span class="line">            <span class="keyword">if</span> (event.preventDefault) event.preventDefault;</span><br><span class="line">            event.returnValue = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            send();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">// 按钮发送</span></span><br><span class="line">    $sendBut.click(send);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始连接。</span></span><br><span class="line">    <span class="keyword">if</span> (name) {</span><br><span class="line">        connectServer();</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        namePrompt();</span><br><span class="line">        connectServer();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">})(jQuery);</span><br></pre></td></tr></table></figure><h1 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mod 操作</span></span><br><span class="line">go mod init</span><br><span class="line">go mod tidy</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># API</span></span><br><span class="line">micro api --namespace com.anycps.wolferhua.api --handler web</span><br></pre></td></tr></table></figure><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><img src="//wolferhua.gitee.io/blog/images/go-micro-book/web.png"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过之前的学习，我们已经学会了&lt;code&gt;api&lt;/code&gt;,&lt;code&gt;rpc&lt;/code&gt;处理器的开发。但是使用发现，这两种处理器是一对一注册的，路由配置比较麻烦（mate*处理器的时候讲）。所以我们今天将回到我们之前的开发模式来开发服务。&lt;/p&gt;
&lt;blockquo
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 4.2 MicroAPI 之 rpc</title>
    <link href="https://wolferhua.github.io/2020/02/06/go-micro-book4-2/"/>
    <id>https://wolferhua.github.io/2020/02/06/go-micro-book4-2/</id>
    <published>2020-02-06T09:19:22.000Z</published>
    <updated>2020-03-18T02:10:25.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>rpc</code> 处理器通过RPC向go-micro应用转送请求，只接收GET和POST请求，GET转发<code>RawQuery</code>，POST转发<code>Body</code>。<code>rpc</code> 几乎和<code>api</code>一致，区别就在于是否会传递http请求头信息和请求类型的限制。</p></blockquote><h1 id="编写API"><a href="#编写API" class="headerlink" title="编写API"></a>编写API</h1><blockquote><p>我的目录结构大概是这样的。之后的操作我们都是基于  <code>$GOPATH/src/gitee.com/wolferhua/go-micro-demo/demo001</code> 目录里边的相对路径。后边就不赘述了。</p></blockquote><h2 id="定义API"><a href="#定义API" class="headerlink" title="定义API"></a>定义API</h2><p><code>rpc1/proto/rpc1/rpc1.proto</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 偷个懒，就不定义request 和 response 结构了，直接应用服务端的定义。</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/rpc1/proto/srv1/srv1.proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义新服务，</span></span><br><span class="line">service Rpc1 &#123;</span><br><span class="line">    rpc Say(HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// protoc --proto_path=$GOPATH/src:. --micro_out=. --go_out=. rpc1.proto</span></span><br></pre></td></tr></table></figure><p>如果不太清楚参考: <a href="/2020/02/06/protobuf/">Protobuf 语言指南（proto3）</a></p><h2 id="三、编写Handler"><a href="#三、编写Handler" class="headerlink" title="三、编写Handler"></a>三、编写Handler</h2><p>查看上边生成的内容，可以知道<code>api</code>的<code>interface</code>定义如下。</p><p><code>rpc1/proto/rpc1/rpc1.pb.micro.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rpc1Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">Say(context.Context, *srv1.HelloRequest, *srv1.HelloResponse) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p><code>rpc1/handler/rpc1.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/rpc1/proto/srv1"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/rpc1/srv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rpc1 <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rpc1.Get 通过API向外暴露为/rpc1/get，接收http请求</span></span><br><span class="line"><span class="comment">// 即：/rpc1/get请求会调用 com.anycps.wolferhua.api.rpc1 服务的 Rpc1.Get方法</span></span><br><span class="line"><span class="comment">// curl 'http://localhost:8080/rpc1/say' -X POST -H 'Content-Type: application/json' -d '&#123;"name":"wolferhua"&#125;'</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Rpc1)</span> <span class="title">Say</span><span class="params">(ctx context.Context, in *srv1.HelloRequest, out *srv1.HelloResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">log.Log(<span class="string">"Rpc1.Say接口收到请求"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用服务,其目的是达到服务相互调用的效果演示。</span></span><br><span class="line">rep, err := srv.Srv1(in.Name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(<span class="string">"服务端响应失败:"</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">//errors.InternalServerError("com.anycps.wolferhua.api.rpc1", "服务端响应失败:"+err.Error())</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回数据</span></span><br><span class="line">out.Greeting = <span class="string">"srv1 response : "</span> + rep</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他方法，无法被api调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Rpc1)</span> <span class="title">Test</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Log(<span class="string">"Rpc1.Test接口收到请求"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、main-go"><a href="#四、main-go" class="headerlink" title="四、main.go"></a>四、main.go</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/rpc1/handler"</span></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/rpc1/proto/rpc1"</span></span><br><span class="line"></span><br><span class="line">micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建新服务</span></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">"com.anycps.wolferhua.api.rpc1"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">service.Init()</span><br><span class="line"><span class="comment">// 注册处理器</span></span><br><span class="line">rpc1.RegisterRpc1Handler(service.Server(), <span class="built_in">new</span>(handler.Rpc1))</span><br><span class="line"><span class="comment">// 执行服务</span></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://localhost:8080/rpc1/say'</span> -X POST -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"name":"wolferhua"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;"greeting":"srv1 response : Hello wolferhua ,from pid 10086"&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;rpc&lt;/code&gt; 处理器通过RPC向go-micro应用转送请求，只接收GET和POST请求，GET转发&lt;code&gt;RawQuery&lt;/code&gt;，POST转发&lt;code&gt;Body&lt;/code&gt;。&lt;code&gt;rpc&lt;/code&gt; 几
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf 语言指南（proto3）</title>
    <link href="https://wolferhua.github.io/2020/02/06/protobuf/"/>
    <id>https://wolferhua.github.io/2020/02/06/protobuf/</id>
    <published>2020-02-06T06:41:29.000Z</published>
    <updated>2020-03-18T02:10:25.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Protobuf"><a href="#什么是Protobuf" class="headerlink" title="什么是Protobuf"></a>什么是<code>Protobuf</code></h1><p>protocol buffers 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于通信协议、数据存储等。</p><h2 id="为什么要用？"><a href="#为什么要用？" class="headerlink" title="为什么要用？"></a>为什么要用？</h2><p>难道<code>json</code>、<code>xml</code>它不香么？香！但是我们来看一个对比图。</p><h3 id="浏览器中运行"><a href="#浏览器中运行" class="headerlink" title="浏览器中运行"></a>浏览器中运行</h3><img src="//wolferhua.gitee.io/blog/images/proto/llq.jpg"> <p>压缩环境下Protobuf和JSON的结果非常相似。Protobuf消息比JSON消息小9％，减少了4%的时间。这听起来像什么都没有，但考虑到浏览器端Protobuf必须从二进制转换为JSON（JavaScript代码使用JSON作为其对象文字格式) - 令人惊讶的速度。好像看不出太大区别？别急接着看。</p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><img src="//wolferhua.gitee.io/blog/images/proto/java.jpg"> <p>性能提升非常明显。在非压缩环境中使用Protobuf时，请求所花费的时间比JSON请求少78％。 这表明二进制格式的执行速度几乎是文本格式的5倍。在压缩环境中发出这些请求时，差异甚至更大。Protobuf执行速度提高了6倍，仅需25ms即可处理JSON格式需要150ms处理的请求。</p><p>正如您所看到的，当JSON不是native环境(如NodeJS,浏览器)时，性能提升的非常大。 因此，当您遇到JSON的延迟问题时，请考虑迁移到Protobuf。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>从上边对比我们可以看到：</p><ul><li>小 5 倍</li><li>快 6 倍 </li></ul><p>如果是和xml对比，这个更加数值更加可观：</p><ul><li>小 3 ~ 10 倍</li><li>快 20 ~ 100 倍 </li></ul><blockquote><p>测试使用的结构非常小，如果再大点这个数值会更加可观。</p></blockquote><p>那它有缺点么？当然！</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>缺少详细的文档。关于使用和开发Protobuf，你不会找到那么多的文档。 </li><li>较小的社区。 例如，在Stack Overflow上，您会发现大约有1500个标有Protobuf标签的问题，而JSON却有超过18万个 </li><li>缺乏支持。 Google不支持如Swift，R，Scala等的编程语言。但是，您可以通过第三方库解决此问题，例如Apple提供的Swift Protobuf。 </li><li>可读性不高。 JSON以文本格式交换，结构简单，易于人类阅读和分析。</li><li>自定义protobuf的工作量偏大</li></ul><p>虽然选择Protobuf会带来这些缺点，但在某些情况下，这个消息格式要快得多。与JSON相比，具有预定义和更大的数据类型集，在Protobuf上序列化的消息可以由负责交换它们的代码自动验证。 他还有一些其他优点： </p><ul><li>格式规范。 </li><li>支持rpc。 </li><li>结构校验。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">go get github.com/micro/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class="line">go get github.com/micro/protoc-gen-micro/v2</span><br><span class="line"></span><br><span class="line"><span class="comment">## protoc 安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### LINUX ###</span></span><br><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.3/protoc-3.11.3-linux-x86_64.zip -O <span class="variable">$GOPATH</span>/protoc.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Mac OS ###</span></span><br><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.3/protoc-3.11.3-osx-x86_64.zip -O <span class="variable">$GOPATH</span>/protoc.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">unzip <span class="variable">$GOPATH</span>/protoc.zip -d <span class="variable">$GOPATH</span>/protoc</span><br><span class="line">cp  <span class="variable">$GOPATH</span>/protoc/bin/protoc  <span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成测试</span></span><br><span class="line"></span><br><span class="line">protoc --version</span><br><span class="line"><span class="comment"># libprotoc 3.11.3</span></span><br></pre></td></tr></table></figure><h2 id="protoc-使用"><a href="#protoc-使用" class="headerlink" title="protoc 使用"></a>protoc 使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: protoc [OPTION] PROTO_FILES</span></span><br><span class="line">protoc --proto_path=<span class="variable">$GOPATH</span>/src:.  --go_out=. user.proto</span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line"><span class="comment"># --proto_path=$GOPATH/src:.  #指定搜索目录为 $GOPATH/src 和 .（当前目录）</span></span><br><span class="line"><span class="comment"># --go_out=.                  #生成go文件到当前目录</span></span><br><span class="line"><span class="comment"># user.proto                  #proto 文件</span></span><br></pre></td></tr></table></figure><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><ul><li><strong>–proto_path=PATH</strong>           指定文件搜索目录</li><li><strong>–cpp_out=OUT_DIR</strong>           生成 C++ header and source.</li><li><strong>–csharp_out=OUT_DIR</strong>        生成 C# source file.</li><li><strong>–java_out=OUT_DIR</strong>          生成 Java source file.</li><li><strong>–js_out=OUT_DIR</strong>            生成 JavaScript source.</li><li><strong>–objc_out=OUT_DIR</strong>          生成 Objective C header and source.</li><li><strong>–php_out=OUT_DIR</strong>           生成 PHP source file.</li><li><strong>–python_out=OUT_DIR</strong>        生成 Python source file.</li><li><strong>–ruby_out=OUT_DIR</strong>          生成 Ruby source file. </li><li><strong>–micro_out=OUT_DIR</strong>         生成 Go-micro source file. </li></ul><h1 id="编写Protobuf"><a href="#编写Protobuf" class="headerlink" title="编写Protobuf"></a>编写<code>Protobuf</code></h1><p>一下代码目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">test1</span><br><span class="line">├── main.go</span><br><span class="line">└── proto</span><br><span class="line">    ├── company</span><br><span class="line">    │   ├── department.pb.go</span><br><span class="line">    │   ├── department.proto</span><br><span class="line">    │   ├── user.pb.go</span><br><span class="line">    │   └── user.proto</span><br><span class="line">    ├── school</span><br><span class="line">    │   ├── school.pb.go</span><br><span class="line">    │   └── school.proto</span><br><span class="line">    ├── user.pb.go</span><br><span class="line">    └── user.proto</span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h4 id="用户定义"><a href="#用户定义" class="headerlink" title="用户定义"></a>用户定义</h4><h4 id="部门定义"><a href="#部门定义" class="headerlink" title="部门定义"></a>部门定义</h4><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>这里直接引用<a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar" target="_blank" rel="noopener">官方文档</a>的描述：</p><table><thead><tr><th>.proto</th><th>C++</th><th>Java</th><th>Python</th><th>Go</th><th>Ruby</th><th>C#</th></tr></thead><tbody><tr><td>double</td><td>double</td><td>double</td><td>float</td><td>float64</td><td>Float</td><td>double</td></tr><tr><td>float</td><td>float</td><td>float</td><td>float</td><td>float32</td><td>Float</td><td>float</td></tr><tr><td>int32</td><td>int32</td><td>int</td><td>int</td><td>int32</td><td>Fixnum or Bignum</td><td>int</td></tr><tr><td>int64</td><td>int64</td><td>long</td><td>ing/long[3]</td><td>int64</td><td>Bignum</td><td>long</td></tr><tr><td>uint32</td><td>uint32</td><td>int[1]</td><td>int/long[3]</td><td>uint32</td><td>Fixnum or Bignum</td><td>uint</td></tr><tr><td>uint64</td><td>uint64</td><td>long[1]</td><td>int/long[3]</td><td>uint64</td><td>Bignum</td><td>ulong</td></tr><tr><td>sint32</td><td>int32</td><td>int</td><td>intj</td><td>int32</td><td>Fixnum or Bignum</td><td>int</td></tr><tr><td>sint64</td><td>int64</td><td>long</td><td>int/long[3]</td><td>int64</td><td>Bignum</td><td>long</td></tr><tr><td>fixed32</td><td>uint32</td><td>int[1]</td><td>int</td><td>uint32</td><td>Fixnum or Bignum</td><td>uint</td></tr><tr><td>fixed64</td><td>uint64</td><td>long[1]</td><td>int/long[3]</td><td>uint64</td><td>Bignum</td><td>ulong</td></tr><tr><td>sfixed32</td><td>int32</td><td>int</td><td>int</td><td>int32</td><td>Fixnum or Bignum</td><td>int</td></tr><tr><td>sfixed64</td><td>int64</td><td>long</td><td>int/long[3]</td><td>int64</td><td>Bignum</td><td>long</td></tr><tr><td>bool</td><td>bool</td><td>boolean</td><td>boolean</td><td>bool</td><td>TrueClass/FalseClass</td><td>bool</td></tr><tr><td>string</td><td>string</td><td>String</td><td>str/unicode[4]</td><td>string</td><td>String(UTF-8)</td><td>string</td></tr><tr><td>bytes</td><td>string</td><td>ByteString</td><td>str</td><td>[]byte</td><td>String(ASCII-8BIT)</td><td>ByteString</td></tr></tbody></table><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>解析消息时，如果编码消息不包含特定的单数元素，则解析对象中的相应字段将设置为该字段的默认值。这些默认值是特定于类型的：</p><ul><li><p>对于字符串，默认值为空字符串。</p></li><li><p>对于字节，默认值为空字节。</p></li><li><p>对于bools，默认值为false。</p></li><li><p>对于数字类型，默认值为零。</p></li><li><p>对于枚举，默认值是第一个定义的枚举值，该值必须为0。</p></li><li><p>对于消息字段，未设置该字段。它的确切值取决于语言。有关详细信息， 请参阅<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">生成的代码指南</a>;</p></li><li><p>重复字段的默认值为空（通常是相应语言的空列表）。</p></li></ul><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><h2 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><h2 id="嵌套使用"><a href="#嵌套使用" class="headerlink" title="嵌套使用"></a>嵌套使用</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><h3 id="生成-1"><a href="#生成-1" class="headerlink" title="生成"></a>生成</h3><h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><p><a href="https://wolferhua.anycps.com/downloads/code/protobuf/test1/" target="_blank" rel="noopener">代码目录</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Protobuf&quot;&gt;&lt;a href=&quot;#什么是Protobuf&quot; class=&quot;headerlink&quot; title=&quot;什么是Protobuf&quot;&gt;&lt;/a&gt;什么是&lt;code&gt;Protobuf&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;protocol buffers 是一种语
      
    
    </summary>
    
      <category term="protobuf" scheme="https://wolferhua.github.io/categories/protobuf/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
      <category term="protobuf" scheme="https://wolferhua.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 4.1 MicroAPI 之 api</title>
    <link href="https://wolferhua.github.io/2020/02/05/go-micro-book4.1/"/>
    <id>https://wolferhua.github.io/2020/02/05/go-micro-book4.1/</id>
    <published>2020-02-05T09:55:09.000Z</published>
    <updated>2020-03-18T02:10:25.489Z</updated>
    
    <content type="html"><![CDATA[<p>通过之前的学习，我们已经知道了如何编写服务，并且了解到了<a href="/2020/02/04/go-micro-book4/">API网关</a>。接下来我们将学习如何编写<strong>API</strong>的处理器，我们先从我们最熟悉的<code>api</code>开始。</p><blockquote><p><code>api</code> 处理器通过RPC向go-micro应用转送请求，会把完整的http头封装向下传送，不限制请求方法。</p></blockquote><h1 id="编写API"><a href="#编写API" class="headerlink" title="编写API"></a>编写API</h1><blockquote><p>我的目录结构大概是这样的。之后的操作我们都是基于  <code>$GOPATH/src/gitee.com/wolferhua/go-micro-demo/demo001</code> 目录里边的相对路径。后边就不赘述了。</p></blockquote><h2 id="一、定义API"><a href="#一、定义API" class="headerlink" title="一、定义API"></a>一、定义API</h2><h3 id="定义api接口的API"><a href="#定义api接口的API" class="headerlink" title="定义api接口的API"></a>定义api接口的API</h3><p><code>api1/proto/api1/api1.proto</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/micro/go-micro/api/proto/api.proto"</span>;</span><br><span class="line"></span><br><span class="line">service Api1 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// go.api.Request 和 go.api.Response 里边就封装了http相关的内容。</span></span><br><span class="line">    rpc Get(go.api.Request) returns(go.api.Response) &#123;&#125;;</span><br><span class="line">    rpc Post(go.api.Request) returns(go.api.Response) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义srv接口API"><a href="#定义srv接口API" class="headerlink" title="定义srv接口API"></a>定义<code>srv</code>接口API</h3><blockquote><p>这个是我们之前编写服务的定义，如有疑惑请看前面章节。</p></blockquote><p><code>api1/proto/srv1/srv1.proto</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line">service Srv1 &#123;</span><br><span class="line">    rpc Hello(HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">    string name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloResponse &#123;</span><br><span class="line">    string greeting = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、生成API"><a href="#二、生成API" class="headerlink" title="二、生成API"></a>二、生成API</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># api </span></span><br><span class="line"><span class="built_in">cd</span> api1/proto/api1</span><br><span class="line">protoc --proto_path=<span class="variable">$GOPATH</span>/src:. --micro_out=. --go_out=. api1.proto</span><br><span class="line"></span><br><span class="line"><span class="comment"># srv</span></span><br><span class="line"><span class="built_in">cd</span> api1/proto/srv1</span><br><span class="line">protoc --proto_path=<span class="variable">$GOPATH</span>/src:. --micro_out=. --go_out=. srv1.proto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 目录结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proto</span></span><br><span class="line"><span class="comment"># ├── api1</span></span><br><span class="line"><span class="comment"># │   ├── api1.pb.go</span></span><br><span class="line"><span class="comment"># │   ├── api1.pb.micro.go</span></span><br><span class="line"><span class="comment"># │   └── api1.proto</span></span><br><span class="line"><span class="comment"># └── srv1</span></span><br><span class="line"><span class="comment">#     ├── srv1.pb.go</span></span><br><span class="line"><span class="comment">#     ├── srv1.pb.micro.go</span></span><br><span class="line"><span class="comment">#     └── srv1.prot</span></span><br></pre></td></tr></table></figure><h2 id="三、编写Handler"><a href="#三、编写Handler" class="headerlink" title="三、编写Handler"></a>三、编写Handler</h2><h3 id="API定义查看"><a href="#API定义查看" class="headerlink" title="API定义查看"></a>API定义查看</h3><p>查看上边生成的内容，可以知道<code>api</code>的<code>interface</code>定义如下。</p><p><code>api1/proto/api1/api1.pb.micro.go:77</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Api1Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">Get(context.Context, *proto1.Request, *proto1.Response) error</span><br><span class="line">Post(context.Context, *proto1.Request, *proto1.Response) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p><code>api1/handler/api1.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/api1/srv"</span></span><br><span class="line"></span><br><span class="line">proto1 <span class="string">"github.com/micro/go-micro/api/proto"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/errors"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Api1 <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Api1.Get 通过API向外暴露为/api1/get，接收http请求</span></span><br><span class="line"><span class="comment">// 即：/api1/get请求会调用com.anycps.wolferhua.api.api1服务的Api1.Get方法</span></span><br><span class="line"><span class="comment">//curl 'http://localhost:8080/api1/get?name=wolferhua'</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Api1)</span> <span class="title">Get</span><span class="params">(ctx context.Context, in *proto1.Request, out *proto1.Response)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">log.Log(<span class="string">"Api1.Get接口收到请求"</span>)</span><br><span class="line"></span><br><span class="line">name, ok := in.Get[<span class="string">"name"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !ok || <span class="built_in">len</span>(name.Values) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.BadRequest(<span class="string">"com.anycps.wolferhua.api.api1"</span>, <span class="string">"参数不正确"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印请求头</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> in.Header &#123;</span><br><span class="line">log.Log(<span class="string">"请求头信息，"</span>, k, <span class="string">" : "</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out.StatusCode = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用服务,其目的是达到服务相互调用的效果演示。</span></span><br><span class="line">sname := strings.Join(name.Values, <span class="string">""</span>)</span><br><span class="line">srvRsp, err := srv.Srv1(sname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.InternalServerError(<span class="string">"com.anycps.wolferhua.api.api1"</span>, <span class="string">"服务端响应失败:"</span>+err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">b, _ := json.Marshal(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"我们已经收到你的请求，"</span> + srvRsp,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置返回值</span></span><br><span class="line">out.Body = <span class="keyword">string</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Api1.Post 通过API向外暴露为/api1/get，接收http请求</span></span><br><span class="line"><span class="comment">// 即：/api1/post请求会调用com.anycps.wolferhua.api.api1服务的Api1.Post方法</span></span><br><span class="line"><span class="comment">// curl http://localhost:8080/api1/post -X POST -H 'Content-Type: application/json' -d '&#123;"name":"wolferhua"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Api1)</span> <span class="title">Post</span><span class="params">(ctx context.Context, in *proto1.Request, out *proto1.Response)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Log(<span class="string">"Api1.Post接口收到请求"</span>)</span><br><span class="line"><span class="comment">// 判断请求类型</span></span><br><span class="line"><span class="keyword">if</span> in.Method != <span class="string">"POST"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.BadRequest(<span class="string">"com.anycps.wolferhua.api.api1"</span>, <span class="string">"require post"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求头信息</span></span><br><span class="line">ct, ok := in.Header[<span class="string">"Content-Type"</span>]</span><br><span class="line"><span class="keyword">if</span> !ok || <span class="built_in">len</span>(ct.Values) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.BadRequest(<span class="string">"com.anycps.wolferhua.api.api1"</span>, <span class="string">"need content-type"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断请求头类型</span></span><br><span class="line"><span class="keyword">if</span> ct.Values[<span class="number">0</span>] != <span class="string">"application/json"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.BadRequest(<span class="string">"com.anycps.wolferhua.api.api1"</span>, <span class="string">"expect application/json"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求数据</span></span><br><span class="line"><span class="keyword">var</span> body <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(in.Body), &amp;body)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置返回值</span></span><br><span class="line">out.Body = <span class="string">"收到消息："</span> + <span class="keyword">string</span>([]<span class="keyword">byte</span>(in.Body))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他方法，无法被api调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Api1)</span> <span class="title">Test</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Log(<span class="string">"Api1.Test接口收到请求"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、调用服务"><a href="#四、调用服务" class="headerlink" title="四、调用服务"></a>四、调用服务</h2><p><code>api1/srv/srv1.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> srv</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/api1/proto/srv1"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Srv1</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">service := micro.NewService()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取客户端对象</span></span><br><span class="line">client := service.Client()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建srv1 客户端</span></span><br><span class="line">srv1Client := srv1.NewSrv1Service(<span class="string">"com.anycps.wolferhua.srv1"</span>, client)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Srv1 handler上请求调用Hello方法</span></span><br><span class="line">rsp, err := srv1Client.Hello(context.TODO(), &amp;srv1.HelloRequest&#123;</span><br><span class="line">Name: name,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回服务端</span></span><br><span class="line"><span class="keyword">return</span> rsp.Greeting, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、main-go"><a href="#五、main-go" class="headerlink" title="五、main.go"></a>五、main.go</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/api1/handler"</span></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/api1/proto/api1"</span></span><br><span class="line"></span><br><span class="line">micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建新服务</span></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">"com.anycps.wolferhua.api.api1"</span>),</span><br><span class="line">    )</span><br><span class="line"><span class="comment">// 细心的朋友可以发现：我们之前定义服务时使用的是：com.anycps.wolferhua.***，</span></span><br><span class="line"><span class="comment">// 现在却使用：com.anycps.wolferhua.api.***。</span></span><br><span class="line"><span class="comment">// 因为我们会定义非常多的接口，需要一个统一的命名空间（Namespace）方便管理。</span></span><br><span class="line"><span class="comment">// 至于命名空间，我们之后会讲解,go-micro 中使用的非常多。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">service.Init()</span><br><span class="line"><span class="comment">// 注册处理器</span></span><br><span class="line">api1.RegisterApi1Handler(service.Server(), <span class="built_in">new</span>(handler.Api1))</span><br><span class="line"><span class="comment">// 执行服务</span></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、运行"><a href="#六、运行" class="headerlink" title="六、运行"></a>六、运行</h2><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>因为我们在<code>api</code>中调用了服务，所以需要启动它，如果你在操作时省去了服务调用环节，可以不用启动它，不是必须的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> srv1 </span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><h3 id="启动网关"><a href="#启动网关" class="headerlink" title="启动网关"></a>启动网关</h3><p>网关的概念，上一张我们讲到过，不清楚的可以看一下：<a href="/2020/02/04/go-micro-book4/">Go-Micro学习笔记 - 4. MicroAPI(API网关)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">micro api --namespace com.anycps.wolferhua.api --handler api</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] Registering API Default Handler at /</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] HTTP API Listening on [::]:8080</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] Starting [service] go.micro.api</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:44:31 [api] Server [grpc] Listening on [::]:33951</span></span><br></pre></td></tr></table></figure><p><strong>参数解释：</strong></p><ul><li><strong>–namespace：</strong> 指定命名空间，只有在这个命名空间以内的服务才可以被访问。</li><li><strong>–handler：</strong> 指定服务类型，这里指定的是<code>api</code>,上一章我们讲过handler的类型。</li></ul><h3 id="启动api"><a href="#启动api" class="headerlink" title="启动api"></a>启动api</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> api1</span><br><span class="line">go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2020-02-05 17:03:23 Starting [service] com.anycps.wolferhua.api.api1</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:03:23 Server [grpc] Listening on [::]:43785</span></span><br><span class="line"><span class="comment"># 2020-02-05 17:03:23 Registry [mdns] Registering node: com.anycps.wolferhua.api.api1-3c0fd6b3-9e19-4c4b-ba12-a217ee15492c</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">micro list services                                         </span><br><span class="line"><span class="comment"># com.anycps.wolferhua.api.api1 # api 服务</span></span><br><span class="line"><span class="comment"># com.anycps.wolferhua.srv1 # 服务</span></span><br><span class="line"><span class="comment"># go.micro.api  # 网关</span></span><br></pre></td></tr></table></figure><h4 id="访问api"><a href="#访问api" class="headerlink" title="访问api"></a>访问api</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://localhost:8080/api1/get?name=wolferhua'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;"message":"我们已经收到你的请求，Hello wolferhua ,from pid 10086"&#125;</span></span><br><span class="line"></span><br><span class="line">curl http://localhost:8080/api1/post -X POST -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"name":"wolferhua"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收到消息：&#123;"name":"wolferhua"&#125;</span></span><br></pre></td></tr></table></figure><p>如此我们的<code>api</code>编写完成。</p><pre><code># 代码仓库- [Api1代码](https://gitee.com/wolferhua/go-micro-demo/tree/master/demo001/api1) </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过之前的学习，我们已经知道了如何编写服务，并且了解到了&lt;a href=&quot;/2020/02/04/go-micro-book4/&quot;&gt;API网关&lt;/a&gt;。接下来我们将学习如何编写&lt;strong&gt;API&lt;/strong&gt;的处理器，我们先从我们最熟悉的&lt;code&gt;api&lt;/cod
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 4. MicroAPI(API网关)</title>
    <link href="https://wolferhua.github.io/2020/02/04/go-micro-book4/"/>
    <id>https://wolferhua.github.io/2020/02/04/go-micro-book4/</id>
    <published>2020-02-04T11:15:34.000Z</published>
    <updated>2020-02-10T11:07:12.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Micro-API"><a href="#Micro-API" class="headerlink" title="Micro API"></a>Micro API</h1><blockquote><p>Micro API是基于服务发现驱动开发的可插拔API框架，旨在帮助构建强大的 <a href="https://microservices.io/patterns/apigateway.html" target="_blank" rel="noopener"><code>API网关</code></a>。</p></blockquote><h2 id="API网关模式"><a href="#API网关模式" class="headerlink" title="API网关模式"></a>API网关模式</h2><p><a href="https://microservices.io/patterns/apigateway.html" target="_blank" rel="noopener"><code>API网关模式</code></a> 为服务提供了一个单一的公共入口。</p><blockquote><p>之后的内容中简称：<strong><code>API</code></strong>,不要和<code>api</code>搞混了，<code>api</code>正对的是一个具体的实现，具体的业务接口。而 <strong><code>API</code></strong> 代表的始终具体的规范。为什么要这样呢？主要是为了更贴合<a href="https://go-micro.dev/" target="_blank" rel="noopener">官方文档</a>，有可能我理解的不够准确。</p></blockquote><img src="//wolferhua.gitee.io/blog/images/go-micro-book/apigateway.jpg"> <p>API网关可以为每个客户端公开不同的API，而不是提供一个一刀切的API。</p><h4 id="前端的后端API"><a href="#前端的后端API" class="headerlink" title="前端的后端API"></a>前端的后端API</h4><p>该模式的一个变体是前端模式的后端。它为每种客户端定义了一个单独的API网关。</p><img src="//wolferhua.gitee.io/blog/images/go-micro-book/bffe.png"> <p>在本例中，有三种客户端:web应用程序、移动应用程序和外部第三方应用程序。有三种不同的应用编程接口网关。每一个都为它的客户提供了一个应用编程接口。</p><h2 id="Micro-API-1"><a href="#Micro-API-1" class="headerlink" title="Micro API"></a>Micro API</h2><p>通过服务发现，Micro API以http方式，将请求动态路由到具体的后台服务接口。</p><img src="//wolferhua.gitee.io/blog/images/go-micro-book/microapi.png"> <p>所以<strong>API</strong>本质上就一个服务网关，它具备动态路由、服务发现的能力，以HTTP方式把外界请求映射到本地微服务，以对外提供服务。</p><p>通过服务发现，配合内置的命名空间（Namespace）【我们之后会讲解go-micro 中使用的非常多】规则，<strong>API</strong>可以把请求url解析映射到匹配该命名空间规则的服务接口。</p><p>在Micro体系中，服务都会有自己的命名空间，而<strong>API</strong>的默认命名空间是<strong>go.micro.api</strong>。通常，部署在其后提供具体接口的微服务，我们会默认按照<br>Micro风格将它们的命名空间设置为<strong>go.micro.api.example</strong>的样式，<strong>example</strong>便是具体的服务名，如果需要改动这个值，在启动时指定<br><code>--namespace=指定名称</code>指令即可。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认的端口是8080</span></span><br><span class="line">micro api</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2020-02-04 19:04:20 [api] Registering API Default Handler at /</span></span><br><span class="line"><span class="comment"># 2020-02-04 19:04:20 [api] HTTP API Listening on [::]:8080</span></span><br><span class="line"><span class="comment"># 2020-02-04 19:04:20 [api] Starting [service] go.micro.api</span></span><br><span class="line"><span class="comment"># 2020-02-04 19:04:20 [api] Server [grpc] Listening on [::]:37275</span></span><br><span class="line"><span class="comment"># 2020-02-04 19:04:20 [api] Registry [mdns] Registering node: go.micro.api-bdbf0099-282a-4b65-bb02-5ad48573c910</span></span><br></pre></td></tr></table></figure><p>另外，API也使用了<a href="https://github.com/micro/go-api" target="_blank" rel="noopener">go-api</a>，这样，它的接口handler处理器也是可以配置的。</p><h1 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h1><p>Handler负责持有并管理HTTP请求路由。</p><p>默认的handler使用从注册中心获取的端口元数据来决定指向服务的路由，如果路由不匹配，就会回退到使用”rpc” hander。</p><p>API有如下方法可以配置请求handler：</p><table><thead><tr><th>-</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>rpc</td><td>通过RPC向go-micro应用转送请求，只接收GET和POST请求，GET转发<code>RawQuery</code>，POST转发<code>Body</code></td></tr><tr><td>2</td><td>api</td><td>与rpc差不多，但是会把完整的http头封装向下传送，不限制请求方法</td></tr><tr><td>3</td><td>http或proxy</td><td>以反向代理的方式使用<strong>API</strong>，相当于把普通的web应用部署在<strong>API</strong>之后，让外界像调api接口一样调用web服务</td></tr><tr><td>4</td><td>web</td><td>与http差不多，但是支持websocket</td></tr><tr><td>5</td><td>event</td><td>代理event事件服务类型的请求</td></tr><tr><td>6</td><td>meta*</td><td>默认值，元数据，通过在代码中的<code>Endpoint</code>配置选择使用上述中的某一个处理器，默认RPC</td></tr></tbody></table><ul><li>重点讲一下rpc和api两种类型的区别，它们的区别就在于，rpc不会把请求头信息封装传下去，而api会。</li><li>meta，并无此模式，只是对api、rpc、proxy、web等模式的扩展使用方法。</li><li><code>Endpoint</code>在路由中会优先匹配，所以使用rpc或api模式同样可以使用此方法定义灵活的路由。</li><li>版本（V1）无法支持多个handler并存运行</li></ul><h2 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h2><h3 id="RPC-API类型"><a href="#RPC-API类型" class="headerlink" title="RPC/API类型"></a>RPC/API类型</h3><p>Micro内部有将http请求路径映射到服务的机制，映射规则可以通过下表介绍</p><table><thead><tr><th>http路径</th><th>后台服务</th><th>接口方法</th></tr></thead><tbody><tr><td>/foo/bar</td><td>go.micro.api.foo</td><td>Foo.Bar</td></tr><tr><td>/foo/bar/baz</td><td>go.micro.api.foo</td><td>Bar.Baz</td></tr><tr><td>/foo/bar/baz/cat</td><td>go.micro.api.foo.bar</td><td>Baz.Cat</td></tr></tbody></table><p>默认的命名空间是<strong>go.micro.api</strong>，上面说过可以通过<code>--namespace</code>指令自定义。</p><p>而有些带版本号的路径，也可以映射到服务名上</p><table><thead><tr><th>请求路径</th><th>后台服务</th><th>接口方法</th></tr></thead><tbody><tr><td>/foo/bar</td><td>go.micro.api.foo</td><td>Foo.Bar</td></tr><tr><td>/v1/foo/bar</td><td>go.micro.api.v1.foo</td><td>Foo.Bar</td></tr><tr><td>/v1/foo/bar/baz</td><td>go.micro.api.v1.foo</td><td>Bar.Baz</td></tr><tr><td>/v2/foo/bar</td><td>go.micro.api.v2.foo</td><td>Foo.Bar</td></tr><tr><td>/v2/foo/bar/baz</td><td>go.micro.api.v2.foo</td><td>Bar.Baz</td></tr></tbody></table><p>从上面的映射规则中可以看出，<strong>RPC/API</strong>模式下，路径后面的两个参数会被组合成Golang公共方法路径名，而剩下的会加上命名空间前缀组成服务名。比如：</p><p><code>/v1/foo/bar/baz</code>，其中<code>bar/baz</code>首字母大写转成<code>Bar.Baz</code>方法路径；剩下的<code>/v1/foo/</code>，附加上命名空间前缀<code>go.micro.api</code>组成<br><code>go.micro.api.v1.foo</code>。</p><h3 id="Proxy类型"><a href="#Proxy类型" class="headerlink" title="Proxy类型"></a>Proxy类型</h3><p>如果我们启动<strong>API</strong>时传指令<code>--handler=http</code>，那么<strong>API</strong>便会反向代理请求到具有API命名空间的后台服务中。</p><p>比如：</p><table><thead><tr><th>请求路径</th><th>服务</th><th>后台服务路径</th></tr></thead><tbody><tr><td>/greeter</td><td>go.micro.api.greeter</td><td>/greeter</td></tr><tr><td>/greeter/:name</td><td>go.micro.api.greeter</td><td>/greeter/:name</td></tr></tbody></table><h3 id="Event类型"><a href="#Event类型" class="headerlink" title="Event类型"></a>Event类型</h3><p>启动<strong>API</strong>时传指令<code>--handler=event</code>，那么<strong>API</strong>便会反向代理请求到具有API命名空间的后台事件消费服务中。</p><p>比如（命名空间设置为go.micro.evt）：</p><table><thead><tr><th>请求路径</th><th>服务</th><th>方法</th></tr></thead><tbody><tr><td>/user/login</td><td>go.micro.evt.user</td><td>侦听器对象（示例中的new(Event)）所有公共方法，且方法要有ctx和事件参数</td></tr></tbody></table><blockquote><p>如果看到这里，觉得有点绕。别着急接着看，接下来我们将自己实现这些 <code>handler</code>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Micro-API&quot;&gt;&lt;a href=&quot;#Micro-API&quot; class=&quot;headerlink&quot; title=&quot;Micro API&quot;&gt;&lt;/a&gt;Micro API&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Micro API是基于服务发现驱动开发的可插拔API框架
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 3. 编写服务</title>
    <link href="https://wolferhua.github.io/2020/02/04/go-micro-book3/"/>
    <id>https://wolferhua.github.io/2020/02/04/go-micro-book3/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2020-03-18T02:10:25.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写服务"><a href="#编写服务" class="headerlink" title="编写服务"></a>编写服务</h1><blockquote><p>顶级的服务接口Service，是构建服务所需的主要组件。它把所有Go-Micror的基础包打包成单一组件接口。</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Service <span class="keyword">interface</span> &#123;</span><br><span class="line">    Init(...Option)</span><br><span class="line">    Options() Options</span><br><span class="line">    Client() client.Client</span><br><span class="line">    Server() server.Server</span><br><span class="line">    Run() error</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一、初始化服务"><a href="#一、初始化服务" class="headerlink" title="一、初始化服务"></a>一、初始化服务</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的目录结构大概是这样的。之后的操作我们都是基于  `$GOPATH/src/gitee.com/wolferhua/go-micro-demo/demo001` 目录里边的相对路径。后边就不赘述了。</span></span><br><span class="line">mkdir -p <span class="variable">$GOPATH</span>/src/gitee.com/wolferhua/go-micro-demo/demo001/srv1</span><br></pre></td></tr></table></figure><h3 id="初始化服务"><a href="#初始化服务" class="headerlink" title="初始化服务"></a>初始化服务</h3><p>创建文件 <code>srv1/main.go</code> 写入以下代码。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">"com.anycps.wolferhua.srv1"</span>),</span><br><span class="line">micro.Version(<span class="string">"latest"</span>),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化go-module"><a href="#初始化go-module" class="headerlink" title="初始化go module"></a>初始化go module</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">go mod init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line">go mod tidy</span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment"># 异常以后多试几次，直到成功为止，由于之前已经配置了`goproxy`代理，一般情况都能下载成功。如果多次还是不行：那么，你出墙吧。</span></span><br><span class="line"><span class="comment">###########</span></span><br></pre></td></tr></table></figure><h2 id="二、定义API"><a href="#二、定义API" class="headerlink" title="二、定义API"></a>二、定义API</h2><p><code>go micro</code> 推荐使用 <code>protobuf</code> 来定义服务的API接口。使用protobuf可以非常方便去严格定义API，提供服务端与客户端双边具体一致的类型。</p><p><code>srv1/proto/srv1/srv1.proto</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">service Srv1 &#123;</span><br><span class="line">rpc Hello(HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloResponse &#123;</span><br><span class="line">string greeting = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、生成API"><a href="#三、生成API" class="headerlink" title="三、生成API"></a>三、生成API</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> srv1/proto/srv1</span><br><span class="line">protoc --proto_path=<span class="variable">$GOPATH</span>/src:. --micro_out=. --go_out=. srv1.proto</span><br></pre></td></tr></table></figure><p>生成的类现在可以引入handler中，在服务或客户端来创建请求了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成后文件结构如下</span></span><br><span class="line"><span class="comment"># └── srv1</span></span><br><span class="line"><span class="comment">#     ├── srv1.pb.go</span></span><br><span class="line"><span class="comment">#     ├── srv1.pb.micro.go</span></span><br><span class="line"><span class="comment">#     └── srv1.proto</span></span><br></pre></td></tr></table></figure><h2 id="四、实现handler处理器"><a href="#四、实现handler处理器" class="headerlink" title="四、实现handler处理器"></a>四、实现handler处理器</h2><p>服务端需要注册<code>handlers</code>，这样才能提供服务并接收请求。处理器相当于是一个拥有公共方法的公共类，它需要符合签名<code>func(ctx context.Context, req interface{}, rsp interface{}) error</code></p><p>通过上面文件的内容，我们看到，<code>Srv1 interface</code>的签名的看上去就是这样：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Srv1Service <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Srv1处理器实现："><a href="#Srv1处理器实现：" class="headerlink" title="Srv1处理器实现："></a>Srv1处理器实现：</h3><p><code>srv1/handler/srv1.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">context <span class="string">"context"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">srv1 <span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/srv1/proto/srv1"</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Srv1 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Srv1)</span> <span class="title">Hello</span><span class="params">(ctx context.Context, req *srv1.HelloRequest, rsp *srv1.HelloResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑处理代码……</span></span><br><span class="line">rsp.Greeting =  <span class="string">"Hello "</span> + req.Name + <span class="string">" ,from pid "</span> + strconv.Itoa(os.Getpid())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册处理器"><a href="#注册处理器" class="headerlink" title="注册处理器"></a>注册处理器</h3><p><code>srv1/main.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line"><span class="comment">// 引入proto定义</span></span><br><span class="line">srv1 <span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/srv1/proto/srv1"</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 注册处理器</span></span><br><span class="line">srv1.RegisterSrv1Handler(service.Server(),<span class="built_in">new</span>(handler.Srv1))</span><br></pre></td></tr></table></figure><h2 id="五、运行服务"><a href="#五、运行服务" class="headerlink" title="五、运行服务"></a>五、运行服务</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、完整代码"><a href="#六、完整代码" class="headerlink" title="六、完整代码"></a>六、完整代码</h2><p><code>srv1/main.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line"></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/srv1/handler"</span></span><br><span class="line">    micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入proto定义</span></span><br><span class="line">srv1 <span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/srv1/proto/srv1"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">"com.anycps.wolferhua.srv1"</span>),</span><br><span class="line">micro.Version(<span class="string">"latest"</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 注册处理器</span></span><br><span class="line">srv1.RegisterSrv1Handler(service.Server(), <span class="built_in">new</span>(handler.Srv1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>srv1/handler/srv1.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">context <span class="string">"context"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">srv1 <span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/srv1/proto/srv1"</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Srv1 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Srv1)</span> <span class="title">Hello</span><span class="params">(ctx context.Context, req *srv1.HelloRequest, rsp *srv1.HelloResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑处理代码……</span></span><br><span class="line">rsp.Greeting =  <span class="string">"Hello "</span> + req.Name + <span class="string">" ,from pid "</span> + strconv.Itoa(os.Getpid())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、启动服务"><a href="#七、启动服务" class="headerlink" title="七、启动服务"></a>七、启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> srv1 </span><br><span class="line">go run main.go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2020-02-04 16:33:40 Starting [service] srv1</span></span><br><span class="line"><span class="comment"># 2020-02-04 16:33:40 Server [grpc] Listening on [::]:42045</span></span><br><span class="line"><span class="comment"># 2020-02-04 16:33:40 Registry [mdns] Registering node: srv1-316a090a-5778-458c-98fa-46949a94c1db</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看服务列表</span></span><br><span class="line"></span><br><span class="line">micro list services</span><br><span class="line"></span><br><span class="line"><span class="comment"># com.anycps.wolferhua.srv1  # 这个就是我们编写的服务</span></span><br></pre></td></tr></table></figure><h1 id="编写客户端"><a href="#编写客户端" class="headerlink" title="编写客户端"></a>编写客户端</h1><h2 id="一、定义API"><a href="#一、定义API" class="headerlink" title="一、定义API"></a>一、定义API</h2><blockquote><p>参考服务的<code>定义API</code></p></blockquote><h2 id="二、生成API"><a href="#二、生成API" class="headerlink" title="二、生成API"></a>二、生成API</h2><blockquote><p> 参考服务的<code>生成API</code></p></blockquote><p>客户端调用服务时需要和服务端的API定义一致，所以 <code>定义</code>、<code>生成</code> 是一样的，这里就不重复讲了，直接开始吧。</p><h2 id="三、编写代码"><a href="#三、编写代码" class="headerlink" title="三、编写代码"></a>三、编写代码</h2><p><code>client1/main.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/micro/go-micro/v2/util/log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gitee.com/wolferhua/go-micro-demo/demo001/client1/proto/srv1"</span></span><br><span class="line">micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"></span><br><span class="line">service := micro.NewService()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取客户端对象</span></span><br><span class="line">client := service.Client()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建srv1 客户端</span></span><br><span class="line">srv1Client := srv1.NewSrv1Service(<span class="string">"com.anycps.wolferhua.srv1"</span>, client)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Srv1 handler上请求调用Hello方法</span></span><br><span class="line">rsp, err := srv1Client.Hello(context.TODO(), &amp;srv1.HelloRequest&#123;</span><br><span class="line">Name: <span class="string">"Srv1"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"服务端返回的内容为："</span>, rsp.Greeting)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化go-module-1"><a href="#初始化go-module-1" class="headerlink" title="初始化go module"></a>初始化go module</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">go mod init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line">go mod tidy</span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment"># 异常以后多试几次，直到成功为止，由于之前已经配置了`goproxy`代理，一般情况都能下载成功。如果多次还是不行：那么，你出墙吧。</span></span><br><span class="line"><span class="comment">###########</span></span><br></pre></td></tr></table></figure><h2 id="四、运行客户端"><a href="#四、运行客户端" class="headerlink" title="四、运行客户端"></a>四、运行客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> client1</span><br><span class="line">go run main.go </span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端返回的内容为： Hello Srv1 ,from pid 10086</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果启动多个服务程序，那么多次执行会返回不同结果。可能产生如下输出。</span></span><br><span class="line"><span class="comment"># 服务端返回的内容为： Hello Srv1 ,from pid 10086</span></span><br><span class="line"><span class="comment"># 服务端返回的内容为： Hello Srv1 ,from pid 10087</span></span><br><span class="line"><span class="comment"># 服务端返回的内容为： Hello Srv1 ,from pid 10086</span></span><br><span class="line"><span class="comment"># 服务端返回的内容为： Hello Srv1 ,from pid 10086</span></span><br><span class="line"><span class="comment"># 服务端返回的内容为： Hello Srv1 ,from pid 10086</span></span><br><span class="line"><span class="comment"># 服务端返回的内容为： Hello Srv1 ,from pid 10087</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是由于`micro`实现了负载均衡。</span></span><br></pre></td></tr></table></figure><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><ul><li><a href="https://gitee.com/wolferhua/go-micro-demo/tree/master/demo001/srv1" target="_blank" rel="noopener">Srv1代码</a></li><li><a href="https://gitee.com/wolferhua/go-micro-demo/tree/master/demo001/client1" target="_blank" rel="noopener">Client代码</a></li></ul><!-- micro new  gitee.com/wolferhua/go-micro-demo/demo001/srv1micro new --type api  gitee.com/wolferhua/go-micro-demo/demo001/api1 -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编写服务&quot;&gt;&lt;a href=&quot;#编写服务&quot; class=&quot;headerlink&quot; title=&quot;编写服务&quot;&gt;&lt;/a&gt;编写服务&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;顶级的服务接口Service，是构建服务所需的主要组件。它把所有Go-Micror的基础包打包成单
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 2. micro 依赖、工具 安装</title>
    <link href="https://wolferhua.github.io/2020/02/03/go-micro-book2/"/>
    <id>https://wolferhua.github.io/2020/02/03/go-micro-book2/</id>
    <published>2020-02-03T07:41:24.000Z</published>
    <updated>2020-03-17T14:41:45.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本笔记基于<code>go-micro/v2</code>所以笔记中会多次出现<code>v2</code>引用，如果使用发现问题，请排查你的<code>go-micro</code>，<code>micro</code>，<code>protoc-gen-micro</code>版本是否匹配。</p></blockquote><h1 id="go依赖"><a href="#go依赖" class="headerlink" title="go依赖"></a>go依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决golang.org/x/xxx 不能下载的问题。</span></span><br><span class="line">mkdir -p <span class="variable">$GOPATH</span>/src/golang.org/x</span><br><span class="line">mkdir -p <span class="variable">$GOPATH</span>/src/google.golang.org</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/text.git <span class="variable">$GOPATH</span>/src/golang.org/x/text</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/tools.git <span class="variable">$GOPATH</span>/src/golang.org/x/tools</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/net.git <span class="variable">$GOPATH</span>/src/golang.org/x/net</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/crypto.git <span class="variable">$GOPATH</span>/src/golang.org/x/crypto</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/exp.git <span class="variable">$GOPATH</span>/src/golang.org/x/exp</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/grpc/grpc-go.git <span class="variable">$GOPATH</span>/src/google.golang.org/grpc</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/googleapis/go-genproto.git  <span class="variable">$GOPATH</span>/src/google.golang.org/genproto</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/googleapis/google-api-go-client.git  <span class="variable">$GOPATH</span>/src/google.golang.org/api</span><br></pre></td></tr></table></figure><p><strong>或者在gomod文件中写下如下指令：</strong></p><blockquote><p>这个操作只针对某个module生效，并不是全局的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">replace golang.org/x/text =&gt; github.com/golang/text latest </span><br><span class="line">replace golang.org/x/tools =&gt; github.com/golang/tools latest </span><br><span class="line">replace golang.org/x/net =&gt; github.com/golang/net latest </span><br><span class="line">replace golang.org/x/crypto =&gt; github.com/golang/crypto latest </span><br><span class="line">replace golang.org/x/exp =&gt; github.com/golang/exp  latest </span><br><span class="line">replace cloud.google.com/go =&gt; github.com/googleapis/google-cloud-go latest</span><br><span class="line">replace google.golang.org/grpc =&gt; github.com/grpc/grpc-go latest </span><br><span class="line">replace google.golang.org/genproto =&gt; github.com/googleapis/go-genproto latest</span><br><span class="line">replace google.golang.org/api =&gt; github.com/googleapis/google-api-go-client latest</span><br></pre></td></tr></table></figure><h1 id="go-micro"><a href="#go-micro" class="headerlink" title="go-micro"></a>go-micro</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/micro/go-micro/v2</span><br></pre></td></tr></table></figure><h1 id="micro-工具包安装"><a href="#micro-工具包安装" class="headerlink" title="micro 工具包安装"></a>micro 工具包安装</h1><blockquote><p>Micro是查询和访问微服务的工具包</p></blockquote><ul><li>http到rpc的API网关</li><li>Web微服务的Web代理</li><li>Sidecar作为服务网格</li><li>用于命令行访问的CLI</li><li>Bot通过Slack进行查询</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/micro/micro/v2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成测试</span></span><br><span class="line">micro -v</span><br><span class="line"><span class="comment"># micro version 2.0.0</span></span><br></pre></td></tr></table></figure><h1 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/micro/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class="line">go get github.com/micro/protoc-gen-micro/v2</span><br><span class="line"></span><br><span class="line"><span class="comment">## protoc 安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### LINUX ###</span></span><br><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.3/protoc-3.11.3-linux-x86_64.zip -O <span class="variable">$GOPATH</span>/protoc.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Mac OS ###</span></span><br><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.3/protoc-3.11.3-osx-x86_64.zip -O <span class="variable">$GOPATH</span>/protoc.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">unzip <span class="variable">$GOPATH</span>/protoc.zip -d <span class="variable">$GOPATH</span>/protoc</span><br><span class="line">cp  <span class="variable">$GOPATH</span>/protoc/bin/protoc  <span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成测试</span></span><br><span class="line"></span><br><span class="line">protoc --version</span><br><span class="line"><span class="comment"># libprotoc 3.11.3</span></span><br></pre></td></tr></table></figure><h1 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h1><h2 id="Multicast-DNS"><a href="#Multicast-DNS" class="headerlink" title="Multicast DNS"></a>Multicast DNS</h2><blockquote><p>本地调试推荐使用</p></blockquote><p>我们可以使用<code>Multicast DNS</code>进行<code>零依赖</code>的服务发现</p><p>将<code>--registry=mdns</code>或者<code>MICRO_REGISTRY=mdns</code>传递给任何命令，例如<code>micro --registry = mdns list services</code></p><h2 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DATA_DIR=<span class="variable">$HOME</span>/data/etcd-data</span><br><span class="line">mkdir -p <span class="variable">$DATA_DIR</span></span><br><span class="line"><span class="built_in">export</span> NODE1=`本机ip地址`</span><br><span class="line">docker run \</span><br><span class="line">  -p 2379:2379 \</span><br><span class="line">  -p 2380:2380 \</span><br><span class="line">  --volume=<span class="variable">$&#123;DATA_DIR&#125;</span>:/etcd-data \</span><br><span class="line">  --name etcd quay.io/coreos/etcd:latest \</span><br><span class="line">  /usr/<span class="built_in">local</span>/bin/etcd \</span><br><span class="line">  --data-dir=/etcd-data --name node1 \</span><br><span class="line">  --initial-advertise-peer-urls http://<span class="variable">$&#123;NODE1&#125;</span>:2380 --listen-peer-urls http://<span class="variable">$&#123;NODE1&#125;</span>:2380 \</span><br><span class="line">  --advertise-client-urls http://<span class="variable">$&#123;NODE1&#125;</span>:2379 --listen-client-urls http://<span class="variable">$&#123;NODE1&#125;</span>:2379 \</span><br><span class="line">  --initial-cluster node1=http://<span class="variable">$&#123;NODE1&#125;</span>:2380</span><br></pre></td></tr></table></figure><h2 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8600:8600 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8301:8301/udp -p 8302:8302/udp consul</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本笔记基于&lt;code&gt;go-micro/v2&lt;/code&gt;所以笔记中会多次出现&lt;code&gt;v2&lt;/code&gt;引用，如果使用发现问题，请排查你的&lt;code&gt;go-micro&lt;/code&gt;，&lt;code&gt;micro&lt;/code&gt;，&lt;code&gt;protoc
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Go-Micro学习笔记 - 1. 基础环境配置</title>
    <link href="https://wolferhua.github.io/2020/02/03/go-micro-book1/"/>
    <id>https://wolferhua.github.io/2020/02/03/go-micro-book1/</id>
    <published>2020-02-03T06:15:59.000Z</published>
    <updated>2020-03-18T02:10:41.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h1><blockquote><p>由于项目使用了低版本的golang，如果直接升级golang会存在老项目异常问题，所以需要在机器上配置另外一套go环境。此环境配置方法适用于<code>linux</code>、<code>MacOs</code>  。<del>windows</del> 可以参考配置。</p></blockquote><h2 id="基本目录创建"><a href="#基本目录创建" class="headerlink" title="基本目录创建"></a>基本目录创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># GROOT</span></span><br><span class="line">mkdir -p  <span class="variable">$HOME</span>/workspace/go13/go</span><br><span class="line"><span class="comment"># GOPATH</span></span><br><span class="line">mkdir -p  <span class="variable">$HOME</span>/workspace/go13</span><br></pre></td></tr></table></figure><h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><blockquote><p>由于网络环境原因，推荐使用国内下载镜像：<a href="http://mirrors.ustc.edu.cn/golang/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/golang/</a></p></blockquote><h3 id="系统包"><a href="#系统包" class="headerlink" title="系统包"></a>系统包</h3><ul><li><strong>Linux：</strong> <a href="http://mirrors.ustc.edu.cn/golang/go1.13.7.linux-amd64.tar.gz" target="_blank" rel="noopener">go1.13.7.linux-amd64.tar.gz</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.ustc.edu.cn/golang/go1.13.7.linux-amd64.tar.gz -O <span class="variable">$GOPATH</span>/go1.13.7.tar.gz</span><br></pre></td></tr></table></figure><ul><li><strong>MacOs：</strong> <a href="http://mirrors.ustc.edu.cn/golang/go1.13.7.darwin-amd64.tar.gz" target="_blank" rel="noopener">go1.13.7.darwin-amd64.tar.gz</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.ustc.edu.cn/golang/go1.13.7.darwin-amd64.tar.gz -O <span class="variable">$GOPATH</span>/go1.13.7.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf <span class="variable">$GOPATH</span>/go1.13.7.tar.gz -C <span class="variable">$HOME</span>/workspace/go13</span><br><span class="line">mv <span class="variable">$GOPATH</span>/go  <span class="variable">$GOPATH</span>/go1.13.7</span><br></pre></td></tr></table></figure><h2 id="配置编辑器"><a href="#配置编辑器" class="headerlink" title="配置编辑器"></a>配置编辑器</h2><blockquote><p>该编辑器配置针对于<code>GoLand</code></p></blockquote><h3 id="设置GOROOT"><a href="#设置GOROOT" class="headerlink" title="设置GOROOT"></a>设置GOROOT</h3><img src="//wolferhua.gitee.io/blog/images/go-micro-book/goland-goroot.png"> <h3 id="设置GOPATH"><a href="#设置GOPATH" class="headerlink" title="设置GOPATH"></a>设置GOPATH</h3><img src="//wolferhua.gitee.io/blog/images/go-micro-book/goland-gopath.png"> <blockquote><p>由于删除了全局<code>Global GOPATH</code>，所以以前的项目都需要设置一下<code>Project GOPATH</code>。参考着配置一下。</p></blockquote><h3 id="启用GOMOD"><a href="#启用GOMOD" class="headerlink" title="启用GOMOD"></a>启用GOMOD</h3><img src="//wolferhua.gitee.io/blog/images/go-micro-book/goland-gomod.png"> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用阿里云的 goproxy</span></span><br><span class="line"><span class="comment"># 在编辑器中配置即可，无需执行以下代码</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br></pre></td></tr></table></figure><h3 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h3><blockquote><p>由于这个配置仅对编辑器生效，所以目前系统默认环境还是以前老环境。这个配置在编辑器外使用是无效的</p></blockquote><h4 id="系统默认终端"><a href="#系统默认终端" class="headerlink" title="系统默认终端"></a>系统默认终端</h4><img src="//wolferhua.gitee.io/blog/images/go-micro-book/goversion.png"> <h4 id="编辑器终端"><a href="#编辑器终端" class="headerlink" title="编辑器终端"></a>编辑器终端</h4><img src="//wolferhua.gitee.io/blog/images/go-micro-book/goland-goversion.png"> <blockquote><p>至此go-micro的golang环境已经搭建完毕。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础环境配置&quot;&gt;&lt;a href=&quot;#基础环境配置&quot; class=&quot;headerlink&quot; title=&quot;基础环境配置&quot;&gt;&lt;/a&gt;基础环境配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于项目使用了低版本的golang，如果直接升级golang会存在老项目异常问题，
      
    
    </summary>
    
      <category term="go" scheme="https://wolferhua.github.io/categories/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/categories/go/micro/"/>
    
    
      <category term="go" scheme="https://wolferhua.github.io/tags/go/"/>
    
      <category term="micro" scheme="https://wolferhua.github.io/tags/micro/"/>
    
      <category term="microservice" scheme="https://wolferhua.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes(k8s)安装记录-ubuntu18.04单master</title>
    <link href="https://wolferhua.github.io/2020/01/02/k8s-install/"/>
    <id>https://wolferhua.github.io/2020/01/02/k8s-install/</id>
    <published>2020-01-02T08:17:12.000Z</published>
    <updated>2020-03-04T06:01:28.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装基于ubuntu 18.04，镜像源为: <a href="https://developer.aliyun.com/mirror/ubuntu" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/ubuntu</a></p></blockquote><h1 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h1><table><thead><tr><th>节点</th><th>配置（最低要求）</th><th>IP</th><th>主机名称</th></tr></thead><tbody><tr><td>master</td><td>2C2G</td><td>192.168.2.30</td><td>ubuntu-vm-30</td></tr><tr><td>worker1</td><td>1C1G</td><td>192.168.2.31</td><td>ubuntu-vm-31</td></tr><tr><td>worker2</td><td>1C1G</td><td>192.168.2.32</td><td>ubuntu-vm-32</td></tr></tbody></table><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><h3 id="关闭系统swap"><a href="#关闭系统swap" class="headerlink" title="关闭系统swap"></a>关闭系统swap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/etc/fstab 注释掉swap项目</span></span><br><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"><span class="comment"># Step 4: 更新并安装Docker-CE</span></span><br><span class="line">sudo apt -y update</span><br><span class="line">sudo apt -y install docker-ce</span><br><span class="line"><span class="comment"># Step 5: 将当前用户加入用户组</span></span><br><span class="line">sudo usermod -a -G docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h3 id="修改docker-配置"><a href="#修改docker-配置" class="headerlink" title="修改docker 配置"></a>修改docker 配置</h3><blockquote><p><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/container-runtimes/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换账号 </span></span><br><span class="line">sudo su</span><br><span class="line"><span class="comment"># 写入配置</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker.</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="下载安装k8s"><a href="#下载安装k8s" class="headerlink" title="下载安装k8s"></a>下载安装k8s</h1><blockquote><p>配置apt源。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新&amp;&amp;安装必要的一些系统工具</span></span><br><span class="line">apt update &amp;&amp; apt install -y apt-transport-https</span><br><span class="line"><span class="comment"># 安装GPG证书</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </span><br><span class="line"><span class="comment"># 配置k8s源</span></span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 配置以后更新</span></span><br><span class="line">apt update</span><br><span class="line">apt install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><blockquote><p>所有机器都必须安装 <code>docker</code>、<code>kubelet</code>、<code>kubeadm</code>、<code>kubectl</code></p></blockquote><h3 id="初始化（仅运行于master）"><a href="#初始化（仅运行于master）" class="headerlink" title="初始化（仅运行于master）"></a>初始化（仅运行于master）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --apiserver-advertise-address 192.168.2.30 --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># init 常用主要参数：</span></span><br><span class="line"><span class="comment"># –kubernetes-version: 指定Kubenetes版本，如果不指定该参数，会从google网站下载最新的版本信息。 v1.17.0</span></span><br><span class="line"><span class="comment"># –pod-network-cidr: 指定pod网络的IP地址范围，它的值取决于你在下一步选择的哪个网络网络插件，比如我在本文中使用的是 calico 网络，需要指定为10.244.0.0/16。</span></span><br><span class="line"><span class="comment"># –apiserver-advertise-address: 指定master服务发布的Ip地址，如果不指定，则会自动检测网络接口，通常是内网IP。</span></span><br><span class="line"><span class="comment"># --image-repository： 指定docker镜像拉取。</span></span><br><span class="line"></span><br><span class="line">sudo kubeadm init --image-repository registry.aliyuncs.com/google_containers  --apiserver-advertise-address 192.168.2.30 --kubernetes-version v1.17.0 --pod-network-cidr=10.240.0.0/16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Kubernetes control-plane has initialized successfully!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To start using your cluster, you need to run the following as a regular user:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   mkdir -p $HOME/.kube</span></span><br><span class="line"><span class="comment">#   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br><span class="line"><span class="comment">#   sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You should now deploy a pod network to the cluster.</span></span><br><span class="line"><span class="comment"># Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:</span></span><br><span class="line"><span class="comment">#   https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Then you can join any number of worker nodes by running the following on each as root:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubeadm join 192.168.2.30:6443 --token vgnn2t.kmq1gqchcwobv7lj \</span></span><br><span class="line"><span class="comment">#     --discovery-token-ca-cert-hash sha256:66d4cba6bad6daba940a87ee29a190386584d8bdeb77145b906914a8c2dd9a64</span></span><br></pre></td></tr></table></figure><h3 id="配置kubectl"><a href="#配置kubectl" class="headerlink" title="配置kubectl"></a>配置kubectl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h3 id="安装-calico"><a href="#安装-calico" class="headerlink" title="安装 calico"></a>安装 calico</h3><blockquote><p>Calico是一个纯三层的方案，为虚机及容器提供多主机间通信，没有使用重叠网络（如flannel）驱动，采用虚拟路由代替虚拟交换，每一台虚拟路由器通过BGP协议传播可达信息（路由）到其他虚拟或物理路由器。</p></blockquote><p><a href="https://www.cnblogs.com/netonline/p/9720279.html" target="_blank" rel="noopener">https://www.cnblogs.com/netonline/p/9720279.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 参考文档 https://docs.projectcalico.org/v3.10/getting-started/kubernetes/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/.kube</span><br><span class="line">wget https://kuboard.cn/install-script/calico/calico-3.10.2.yaml</span><br><span class="line">sed -i <span class="string">"s#192\.168\.0\.0/16#10\.244\.0\.0/16#"</span> calico-3.10.2.yaml</span><br><span class="line">kubectl apply -f calico-3.10.2.yaml</span><br></pre></td></tr></table></figure><h3 id="检查初始化结果"><a href="#检查初始化结果" class="headerlink" title="检查初始化结果"></a>检查初始化结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只在 master 节点执行</span></span><br><span class="line"><span class="comment"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span></span><br><span class="line">watch kubectl get pod -n kube-system -o wide</span><br><span class="line"><span class="comment"># 查看 master 节点初始化结果</span></span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># NAME      STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME</span></span><br><span class="line"><span class="comment">#loyo-vm   Ready    master   15m   v1.17.0   192.168.2.30   &lt;none&gt;        Ubuntu 18.04.3 LTS   4.15.0-72-generic   docker://19.3.5</span></span><br></pre></td></tr></table></figure><h1 id="初始化Worker"><a href="#初始化Worker" class="headerlink" title="初始化Worker"></a>初始化Worker</h1><h3 id="获得加入命令"><a href="#获得加入命令" class="headerlink" title="获得加入命令"></a>获得加入命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在master节点执行</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有效时间两小时</span></span><br><span class="line"><span class="comment"># W1231 07:24:53.712544    7649 validation.go:28] Cannot validate kube-proxy config - no validator is available</span></span><br><span class="line"><span class="comment"># W1231 07:24:53.713100    7649 validation.go:28] Cannot validate kubelet config - no validator is available</span></span><br><span class="line"><span class="comment"># kubeadm join 192.168.2.30:6443 --token 0zcj6i.ibrv1n0914oamhvf     --discovery-token-ca-cert-hash sha256:66d4cba6bad6daba940a87ee29a190386584d8bdeb77145b906914a8c2dd9a64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行加入</span></span><br><span class="line"></span><br><span class="line">sudo kubeadm join 192.168.2.30:6443 --token 0zcj6i.ibrv1n0914oamhvf     --discovery-token-ca-cert-hash sha256:66d4cba6bad6daba940a87ee29a190386584d8bdeb77145b906914a8c2dd9a64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># W1231 07:25:29.249270    2005 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.</span></span><br><span class="line"><span class="comment"># [preflight] Running pre-flight checks</span></span><br><span class="line"><span class="comment"># [preflight] Reading configuration from the cluster...</span></span><br><span class="line"><span class="comment"># [preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class="line"><span class="comment"># [kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.17" ConfigMap in the kube-system namespace</span></span><br><span class="line"><span class="comment"># [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"</span></span><br><span class="line"><span class="comment"># [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line"><span class="comment"># [kubelet-start] Starting the kubelet</span></span><br><span class="line"><span class="comment"># [kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This node has joined the cluster:</span></span><br><span class="line"><span class="comment"># * Certificate signing request was sent to apiserver and a response was received.</span></span><br><span class="line"><span class="comment"># * The Kubelet was informed of the new secure connection details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run 'kubectl get nodes' on the control-plane to see this node join the cluster.</span></span><br></pre></td></tr></table></figure><h1 id="安装-Ingress-Controller"><a href="#安装-Ingress-Controller" class="headerlink" title="安装 Ingress Controller"></a>安装 Ingress Controller</h1><p><a href="https://www.jianshu.com/p/595fd3fac7ff" target="_blank" rel="noopener">ingress介绍</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master 上执行</span></span><br><span class="line"><span class="comment">#  如果打算用于生产环境，请参考 https://github.com/nginxinc/kubernetes-ingress/blob/v1.5.5/docs/installation.md 并根据您自己的情况做进一步定制</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f https://kuboard.cn/install-script/v1.17.x/nginx-ingress.yaml</span><br></pre></td></tr></table></figure><h1 id="安装教程参考"><a href="#安装教程参考" class="headerlink" title="安装教程参考"></a>安装教程参考</h1><ul><li><a href="https://www.kuboard.cn/install/install-k8s.html" target="_blank" rel="noopener">使用kubeadm安装kubernetes_v1.17.x</a></li><li><a href="https://www.jianshu.com/p/d18f7d3df53b" target="_blank" rel="noopener">k8s ubuntu18 安装</a></li><li><a href="http://dockone.io/article/8722" target="_blank" rel="noopener">Kubernetes CNI网络最强对比：Flannel、Calico、Canal和Weave</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装基于ubuntu 18.04，镜像源为: &lt;a href=&quot;https://developer.aliyun.com/mirror/ubuntu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://wolferhua.github.io/categories/kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux安装</title>
    <link href="https://wolferhua.github.io/2019/10/26/linux-002-install/"/>
    <id>https://wolferhua.github.io/2019/10/26/linux-002-install/</id>
    <published>2019-10-26T06:02:24.000Z</published>
    <updated>2020-02-10T11:07:12.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h1><ol><li><a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">VMware Workstation Pro</a> </li><li><a href="https://mirrors.huaweicloud.com/ubuntu-cdimage/ubuntu/releases" target="_blank" rel="noopener">Ubuntu</a></li></ol><blockquote><p>VMware Workstation Pro 开放密钥 <code>GV7N2-DQZ00-4897Y-27ZNX-NV0TD</code></p></blockquote><h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><blockquote><p>新建虚拟机</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/001.png"><blockquote><p>选择自定义</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/002.png"><blockquote><p>虚拟机兼容版本设置，默认选择当前Vmware版本</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/003.png"><blockquote><p>选择”稍后选择操作系统“</p></blockquote><p>vmeare做虚拟机时间非常久了，Ubuntu这种系统被安装过无数次，所以如果你选择了安装程序光盘，他可能会执行<code>快速安装</code>模式。会缺少自定义过程。</p><img src="//wolferhua.gitee.io/blog/images/linux/install/004.png"><blockquote><p>选择虚拟机系统类型</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/005.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/006.png"><blockquote><p>自定义虚拟机名称</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/007.png"><blockquote><p>设置CPU和内存：2核2G</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/008.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/009.png"><br><blockquote><p>设置网络</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/010.png"><blockquote><p>磁盘设置</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/011.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/012.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/013.png"><br><p><font color="red"> 最后选择单个磁盘，这样虚拟机性能能达到最高。 </font></p><img src="//wolferhua.gitee.io/blog/images/linux/install/014.png"><blockquote><p>虚拟磁盘文件名称</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/015.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/016.png"><br><blockquote><p>选择安装镜像</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/017.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/018.png"><br><h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h1><blockquote><p>语言</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/019.png"><blockquote><p><code>Install Ubuntu Server</code></p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/020.png"><blockquote><p>设置语言和键盘</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/021.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/022.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/023.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/024.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/025.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/026.png"><br><blockquote><p>设置主机名称</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/027.png"><blockquote><p>用户名和密码设置</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/028.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/029.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/030.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/031.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/032.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/033.png"><br><blockquote><p>设置时区：Asia/Shanghai、Asia/Chongqing</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/034.png"><br><blockquote><p>磁盘分区</p></blockquote><p>直接选择LVM分区就好，目前分区条件已经成熟，无需像老版本那样自己去分割磁盘。现有的选项就是最常用的分区逻辑了。</p><img src="//wolferhua.gitee.io/blog/images/linux/install/035.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/036.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/037.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/038-1.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/039.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/040.png"><br><blockquote><p>代理设置，没有不用设置：可能会稍微等一会</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/041.png"><blockquote><p>系统更新到最新版本</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/042.png"><blockquote><p>由于我们安装的是Server版本，最好选择安装ssh</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/043.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/044.png"><br><blockquote><p>写入引导</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/045.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/046.png"><br><img src="//wolferhua.gitee.io/blog/images/linux/install/047.png"><br><blockquote><p>登录系统</p></blockquote><img src="//wolferhua.gitee.io/blog/images/linux/install/048.png"><h1 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;资源准备&quot;&gt;&lt;a href=&quot;#资源准备&quot; class=&quot;headerlink&quot; title=&quot;资源准备&quot;&gt;&lt;/a&gt;资源准备&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vmware.com/products/workstation-pro
      
    
    </summary>
    
      <category term="linux" scheme="https://wolferhua.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux简介</title>
    <link href="https://wolferhua.github.io/2019/10/26/linux-001-intro/"/>
    <id>https://wolferhua.github.io/2019/10/26/linux-001-intro/</id>
    <published>2019-10-26T06:02:19.000Z</published>
    <updated>2020-02-10T11:07:12.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-is-not-Unix。"><a href="#Linux-is-not-Unix。" class="headerlink" title="Linux is not Unix。"></a>Linux is not Unix。</h1><img src="//wolferhua.gitee.io/blog/images/linux/unix_architecture.jpg"><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。 </p><p>当年 linus 就是因为接触到了unix而后才自己想开发一个简易的系统内核的，他开发的简易系统内核其实就是linux。当时linus 把开发的这个系统内核丢到网上提供大家下载，由于它的精致小巧，越来越多的爱好者去研究它。人们对这个内核添枝加叶，而后成为了一个系统。也许你听说过吧，linux 是免费的。其实这里的免费只是说linux的内核免费。在 linux 内核的基础上而产生了众多 linux 的版本。</p><img src="//wolferhua.gitee.io/blog/images/linux/LinuxVersion.png"><img src="//wolferhua.gitee.io/blog/images/linux/linux-family.jpg"><h1 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h1><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><pre><code>- 均是使用linux内核，提供硬件、磁盘、文件系统、多任务的核心操作。- 不同发行版定位不一样：面向个人桌面或企业服务。</code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><pre><code>- 内核版本不同- 包管理器不同 `最大的区别`</code></pre><h1 id="Linux-思想"><a href="#Linux-思想" class="headerlink" title="Linux 思想"></a>Linux 思想</h1><h2 id="1、-一切接皆文件"><a href="#1、-一切接皆文件" class="headerlink" title="1、 一切接皆文件"></a>1、 一切接皆文件</h2><p>几乎把所有的资源系统抽象为文件形式：包括硬件设备，甚至通信接口等。作用：提高资源管理效率。例如：<br></p><ul><li>物理终端：/dev/console</li><li>虚拟终端：/dev/tty#（#为1~6）</li><li>串行终端：/dev/ttyS#</li><li>伪终端：/dev/pts/#</li><li>/dev/zero 一个可以都出无限个0的文件</li><li>/dev/null 一个重定向进去之后就消失了的文件，相当于黑洞 </li><li>…… </li></ul><blockquote><p><strong>优点：</strong><br>可以使用同一套机制来处理Linux系统中的大多数资源。<br><br>比如系统调用：open(), read(), write(), close(), delete(), create()</p></blockquote><h2 id="2、-由众多功能单一的程序共同完成复杂任务"><a href="#2、-由众多功能单一的程序共同完成复杂任务" class="headerlink" title="2、 由众多功能单一的程序共同完成复杂任务"></a>2、 由众多功能单一的程序共同完成复杂任务</h2><p>Linux倾向于让一个程序只做一件事，并且做好；让这样的程序能够基于统一的标准开放接口，再由多个这种功能单一的程序组合起来，共同完成更为复杂的任务。</p><blockquote><p><strong>优点：</strong><br>程序代码更轻量，更高效；<br>出现错误更容易定位；<br>程序的功能延展更具灵活性；</p></blockquote><h2 id="3、-尽量避免跟用户交互"><a href="#3、-尽量避免跟用户交互" class="headerlink" title="3、 尽量避免跟用户交互"></a>3、 尽量避免跟用户交互</h2><p>正是由于面向的对象不同，Linux系统管理多使用命令行接口，通过命令对系统进行操作和管理，这与Windows的设计理念有着迥然的区别。</p><blockquote><p><strong>优点：</strong><br>易于以编程的方式实现自动化任务；<br>为自动化运维，乃至DevOps日后的发展奠定了基础。</p></blockquote><h2 id="4、-使用文本文件保存配置信息"><a href="#4、-使用文本文件保存配置信息" class="headerlink" title="4、 使用文本文件保存配置信息"></a>4、 使用文本文件保存配置信息</h2><p>所有的配置文件都采用文本文件的方式保存，管理人员可以通过vi或vim文本编辑工具对其进行修改。</p><blockquote><p><strong>优点：</strong><br>方便管理者对应用软件进行配置、检查工作，而且为避免服务因修改配置中断，多数应用程序也会针对配置文件的更改提供不中断服务的reload操作，这也是Linux系统运行比Windows稳定的一个因素。</p></blockquote><h2 id="5、-提供机制，而非策略"><a href="#5、-提供机制，而非策略" class="headerlink" title="5、 提供机制，而非策略"></a>5、 提供机制，而非策略</h2><p> 机制，是实现某个功能需要的原语操作和结构      </p><p> 策略，是某功能的具体实现  </p><blockquote><p><strong>优点：</strong><br> 提供机制，而非策略，指的就是要给用户充分的自主可调配性</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-is-not-Unix。&quot;&gt;&lt;a href=&quot;#Linux-is-not-Unix。&quot; class=&quot;headerlink&quot; title=&quot;Linux is not Unix。&quot;&gt;&lt;/a&gt;Linux is not Unix。&lt;/h1&gt;&lt;img src=
      
    
    </summary>
    
      <category term="linux" scheme="https://wolferhua.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门教程（十一）Docker Swarm</title>
    <link href="https://wolferhua.github.io/2019/09/08/docker-011/"/>
    <id>https://wolferhua.github.io/2019/09/08/docker-011/</id>
    <published>2019-09-08T03:33:31.000Z</published>
    <updated>2020-02-10T11:07:12.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-Docker-Swarm"><a href="#0-Docker-Swarm" class="headerlink" title="0. Docker Swarm"></a>0. Docker Swarm</h1><p>Swarm 是 Docker 社区提供的唯一一个原生支持 Docker 集群管理的工具。它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机，使得容器可以组成跨主机的子网网络。Swarm 在 Docker 1.12 版本之前属于一个独立的项目，在 Docker 1.12 版本发布之后，该项目合并到了 Docker 中，成为 Docker 的一个子命令。 </p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker swarm --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage:  docker swarm COMMAND</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Manage Swarm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment">#   ca          Display and rotate the root CA</span></span><br><span class="line"><span class="comment">#   init        Initialize a swarm</span></span><br><span class="line"><span class="comment">#   join        Join a swarm as a node and/or manager</span></span><br><span class="line"><span class="comment">#   join-token  Manage join tokens</span></span><br><span class="line"><span class="comment">#   leave       Leave the swarm</span></span><br><span class="line"><span class="comment">#   unlock      Unlock swarm</span></span><br><span class="line"><span class="comment">#   unlock-key  Manage the unlock key</span></span><br><span class="line"><span class="comment">#   update      Update the swarm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run 'docker swarm COMMAND --help' for more information on a command.</span></span><br></pre></td></tr></table></figure><h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><h2 id="版本检查"><a href="#版本检查" class="headerlink" title="版本检查"></a>版本检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"><span class="comment"># Client:</span></span><br><span class="line"><span class="comment">#  Version:           18.09.6-ce</span></span><br><span class="line"><span class="comment">#  API version:       1.39</span></span><br><span class="line"><span class="comment">#  Go version:        go1.12.4</span></span><br><span class="line"><span class="comment">#  Git commit:        481bc77156</span></span><br><span class="line"><span class="comment">#  Built:             Sat May 11 06:11:03 2019</span></span><br><span class="line"><span class="comment">#  OS/Arch:           linux/amd64</span></span><br><span class="line"><span class="comment">#  Experimental:      false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server:</span></span><br><span class="line"><span class="comment">#  Engine:</span></span><br><span class="line"><span class="comment">#   Version:          18.09.6-ce</span></span><br><span class="line"><span class="comment">#   API version:      1.39 (minimum version 1.12)</span></span><br><span class="line"><span class="comment">#   Go version:       go1.12.4</span></span><br><span class="line"><span class="comment">#   Git commit:       481bc77156</span></span><br><span class="line"><span class="comment">#   Built:            Sat May 11 06:10:35 2019</span></span><br><span class="line"><span class="comment">#   OS/Arch:          linux/amd64</span></span><br><span class="line"><span class="comment">#   Experimental:     false</span></span><br></pre></td></tr></table></figure><h2 id="机器列表"><a href="#机器列表" class="headerlink" title="机器列表"></a>机器列表</h2><blockquote><p>测试时可以使用<code>Docker Machine</code>（Docker三剑客之一）便捷的创建虚拟机，本教程不涉及相关知识。大家可以自己去学习一下。</p></blockquote><ol><li>Manager <code>192.168.65.95</code> — manjaro</li><li>Worker1 <code>192.168.65.21</code> — alpine</li><li>Worker2 <code>192.168.65.22</code> — alpine</li></ol><h1 id="2-创建manager"><a href="#2-创建manager" class="headerlink" title="2. 创建manager"></a>2. 创建manager</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用默认网卡ip地址</span></span><br><span class="line">docker swarm init </span><br><span class="line"><span class="comment"># 当存在多个ip地址时需要指定ip地址</span></span><br><span class="line">docker swarm init --advertise-addr 192.168.65.95</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Swarm initialized: current node (m1z4ppjigoqyr625bqju05ygb) is now a manager.</span></span><br><span class="line"><span class="comment"># To add a worker to this swarm, run the following command:</span></span><br><span class="line"><span class="comment">## 使用下边的命令添加 worker</span></span><br><span class="line"><span class="comment">#     docker swarm join --token SWMTKN-1-51v6cmdfaz1miits0npifyif2i4dcubvtoejc660pmj5c9ud0z-9wuwp1rgyss4pffsyo9qgyx0h 192.168.65.95:2377</span></span><br><span class="line"><span class="comment">## 如果需要添加  manager 使用 docker swarm join-token manager 获取加入命令。</span></span><br><span class="line"><span class="comment"># To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果需要添加  manager 使用  docker swarm join-token worker 获取加入命令。</span></span><br></pre></td></tr></table></figure><h1 id="3-将worker加入集群"><a href="#3-将worker加入集群" class="headerlink" title="3. 将worker加入集群"></a>3. 将<code>worker</code>加入集群</h1><blockquote><p>分别登录<code>worker</code>节点，执行下边命令。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-51v6cmdfaz1miits0npifyif2i4dcubvtoejc660pmj5c9ud0z-9wuwp1rgyss4pffsyo9qgyx0h 192.168.65.95:2377</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This node joined a swarm as a worker.</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h1 id="4-查看节点状态"><a href="#4-查看节点状态" class="headerlink" title="4. 查看节点状态"></a>4. 查看节点状态</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br><span class="line"><span class="comment"># ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span></span><br><span class="line"><span class="comment"># hoyv9djysw7cq67oc44bksz00     alpine-21           Ready               Active                                  18.09.1-ce</span></span><br><span class="line"><span class="comment"># wfthauhq7yem8d34hm9xxoaqe     alpine-22           Ready               Active                                  18.09.1-ce</span></span><br><span class="line"><span class="comment"># m1z4ppjigoqyr625bqju05ygb *   manjaro             Ready               Active              Leader              18.09.6-ce</span></span><br></pre></td></tr></table></figure><h1 id="5-基本使用"><a href="#5-基本使用" class="headerlink" title="5. 基本使用"></a>5. 基本使用</h1><h2 id="5-0-基础命令"><a href="#5-0-基础命令" class="headerlink" title="5.0 基础命令"></a>5.0 基础命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> docker service --<span class="built_in">help</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage:  docker service COMMAND</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Manage services</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment">#   create      Create a new service</span></span><br><span class="line"><span class="comment">#   inspect     Display detailed information on one or more services</span></span><br><span class="line"><span class="comment">#   logs        Fetch the logs of a service or task</span></span><br><span class="line"><span class="comment">#   ls          List services</span></span><br><span class="line"><span class="comment">#   ps          List the tasks of one or more services</span></span><br><span class="line"><span class="comment">#   rm          Remove one or more services</span></span><br><span class="line"><span class="comment">#   rollback    Revert changes to a service's configuration</span></span><br><span class="line"><span class="comment">#   scale       Scale one or multiple replicated services</span></span><br><span class="line"><span class="comment">#   update      Update a service</span></span><br></pre></td></tr></table></figure><h2 id="5-1-创建服务"><a href="#5-1-创建服务" class="headerlink" title="5.1 创建服务"></a>5.1 创建服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 1 --name myservice daocloud.io/alpine ping 127.0.0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mvzgvw3we89sfhm4tea8i24l6</span></span><br><span class="line"><span class="comment"># overall progress: 1 out of 1 tasks </span></span><br><span class="line"><span class="comment"># 1/1: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># verify: Service converged</span></span><br></pre></td></tr></table></figure><h3 id="5-2-服务列表"><a href="#5-2-服务列表" class="headerlink" title="5.2 服务列表"></a>5.2 服务列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># ID                  NAME                MODE                REPLICAS            IMAGE                       PORTS</span></span><br><span class="line"><span class="comment"># mvzgvw3we89s        myservice              replicated          1/1                 daocloud.io/alpine:latest</span></span><br></pre></td></tr></table></figure><h3 id="5-3-查看服务信息"><a href="#5-3-查看服务信息" class="headerlink" title="5.3 查看服务信息"></a>5.3 查看服务信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect myservice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         "ID": "mvzgvw3we89sfhm4tea8i24l6",</span></span><br><span class="line"><span class="comment">#         "Version": &#123;</span></span><br><span class="line"><span class="comment">#             "Index": 33</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         "CreatedAt": "2019-06-17T08:31:45.64841901Z",</span></span><br><span class="line"><span class="comment">#         "UpdatedAt": "2019-06-17T08:31:45.64841901Z",</span></span><br><span class="line"><span class="comment">#         "Spec": &#123;</span></span><br><span class="line"><span class="comment">#             "Name": "alpine",</span></span><br><span class="line"><span class="comment">#             "Labels": &#123;&#125;,</span></span><br><span class="line"><span class="comment">#             "TaskTemplate": &#123;</span></span><br><span class="line"><span class="comment">#                 "ContainerSpec": &#123;</span></span><br><span class="line"><span class="comment">#                     "Image": "daocloud.io/alpine:latest@sha256:bf1684a6e3676389ec861c602e97f27b03f14178e5bc3f70dce198f9f160cce9",</span></span><br><span class="line"><span class="comment">#                     "Args": [</span></span><br><span class="line"><span class="comment">#                         "ping",</span></span><br><span class="line"><span class="comment">#                         "127.0.0.1"</span></span><br><span class="line"><span class="comment">#                     ],</span></span><br><span class="line"><span class="comment">#                     "Init": false,</span></span><br><span class="line"><span class="comment">#                     "StopGracePeriod": 10000000000,</span></span><br><span class="line"><span class="comment">#                     "DNSConfig": &#123;&#125;,</span></span><br><span class="line"><span class="comment">#                     "Isolation": "default"</span></span><br><span class="line"><span class="comment">#                 &#125;,</span></span><br><span class="line"><span class="comment">#                 "Resources": &#123;</span></span><br><span class="line"><span class="comment">#                     "Limits": &#123;&#125;,</span></span><br><span class="line"><span class="comment">#                     "Reservations": &#123;&#125;</span></span><br><span class="line"><span class="comment">#                 &#125;,</span></span><br><span class="line"><span class="comment">#                 "RestartPolicy": &#123;</span></span><br><span class="line"><span class="comment">#                     "Condition": "any",</span></span><br><span class="line"><span class="comment">#                     "Delay": 5000000000,</span></span><br><span class="line"><span class="comment">#                     "MaxAttempts": 0</span></span><br><span class="line"><span class="comment">#                 &#125;,</span></span><br><span class="line"><span class="comment">#                 "Placement": &#123;</span></span><br><span class="line"><span class="comment">#                     "Platforms": [</span></span><br><span class="line"><span class="comment">#                         &#123;</span></span><br><span class="line"><span class="comment">#                             "Architecture": "amd64",</span></span><br><span class="line"><span class="comment">#                             "OS": "linux"</span></span><br><span class="line"><span class="comment">#                         &#125;</span></span><br><span class="line"><span class="comment">#                     ]</span></span><br><span class="line"><span class="comment">#                 &#125;,</span></span><br><span class="line"><span class="comment">#                 "ForceUpdate": 0,</span></span><br><span class="line"><span class="comment">#                 "Runtime": "container"</span></span><br><span class="line"><span class="comment">#             &#125;,</span></span><br><span class="line"><span class="comment">#             "Mode": &#123;</span></span><br><span class="line"><span class="comment">#                 "Replicated": &#123;</span></span><br><span class="line"><span class="comment">#                     "Replicas": 1</span></span><br><span class="line"><span class="comment">#                 &#125;</span></span><br><span class="line"><span class="comment">#             &#125;,</span></span><br><span class="line"><span class="comment">#             "UpdateConfig": &#123;</span></span><br><span class="line"><span class="comment">#                 "Parallelism": 1,</span></span><br><span class="line"><span class="comment">#                 "FailureAction": "pause",</span></span><br><span class="line"><span class="comment">#                 "Monitor": 5000000000,</span></span><br><span class="line"><span class="comment">#                 "MaxFailureRatio": 0,</span></span><br><span class="line"><span class="comment">#                 "Order": "stop-first"</span></span><br><span class="line"><span class="comment">#             &#125;,</span></span><br><span class="line"><span class="comment">#             "RollbackConfig": &#123;</span></span><br><span class="line"><span class="comment">#                 "Parallelism": 1,</span></span><br><span class="line"><span class="comment">#                 "FailureAction": "pause",</span></span><br><span class="line"><span class="comment">#                 "Monitor": 5000000000,</span></span><br><span class="line"><span class="comment">#                 "MaxFailureRatio": 0,</span></span><br><span class="line"><span class="comment">#                 "Order": "stop-first"</span></span><br><span class="line"><span class="comment">#             &#125;,</span></span><br><span class="line"><span class="comment">#             "EndpointSpec": &#123;</span></span><br><span class="line"><span class="comment">#                 "Mode": "vip"</span></span><br><span class="line"><span class="comment">#             &#125;</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         "Endpoint": &#123;</span></span><br><span class="line"><span class="comment">#             "Spec": &#123;&#125;</span></span><br><span class="line"><span class="comment">#         &#125;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br></pre></td></tr></table></figure><h3 id="5-4-扩展服务"><a href="#5-4-扩展服务" class="headerlink" title="5.4 扩展服务"></a>5.4 扩展服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker service scale myservice=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># myservice scaled to 5</span></span><br><span class="line"><span class="comment"># overall progress: 5 out of 5 tasks </span></span><br><span class="line"><span class="comment"># 1/5: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># 2/5: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># 3/5: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># 4/5: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># 5/5: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># verify: Service converged</span></span><br></pre></td></tr></table></figure><h3 id="5-4-查看服务状态"><a href="#5-4-查看服务状态" class="headerlink" title="5.4 查看服务状态"></a>5.4 查看服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker service ps  myservice    </span><br><span class="line"><span class="comment"># ID                  NAME                IMAGE                       NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span></span><br><span class="line"><span class="comment"># zm0gt7xpgfle        myservice.1            daocloud.io/alpine:latest   manjaro             Running             Running 8 minutes ago                            </span></span><br><span class="line"><span class="comment"># nxm0xfp4kcrp        myservice.2            daocloud.io/alpine:latest   alpine-21           Running             Running about a minute ago                       </span></span><br><span class="line"><span class="comment"># 6g4g3wctgyz0        myservice.3            daocloud.io/alpine:latest   alpine-22           Running             Running about a minute ago                       </span></span><br><span class="line"><span class="comment"># v9i18qk4jr6d        myservice.4            daocloud.io/alpine:latest   alpine-22           Running             Running about a minute ago                       </span></span><br><span class="line"><span class="comment"># d4462wbx1bmc        myservice.5            daocloud.io/alpine:latest   manjaro             Running             Running about a minute ago</span></span><br></pre></td></tr></table></figure><h3 id="5-5-查看服务日志"><a href="#5-5-查看服务日志" class="headerlink" title="5.5 查看服务日志"></a>5.5 查看服务日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service logs myservice</span><br></pre></td></tr></table></figure><h3 id="5-5-删除服务"><a href="#5-5-删除服务" class="headerlink" title="5.5 删除服务"></a>5.5 删除服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service rm myservice</span><br></pre></td></tr></table></figure><h1 id="结合-docker-compose-yml"><a href="#结合-docker-compose-yml" class="headerlink" title="结合 docker-compose.yml"></a>结合 docker-compose.yml</h1><h2 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h2><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><figure class="highlight yml"><figcaption><span>docker-compose.yml</span><a href="/downloads/code/docker/011-base/docker-compose.yml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">alpine:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">"daocloud.io/alpine"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["ping","127.0.0.1"]</span> </span><br><span class="line">        <span class="attr">deploy:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">global</span> </span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span>   </span><br><span class="line">    </span><br><span class="line">    <span class="attr">alpine-replicated:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">"daocloud.io/alpine"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["ping","127.0.0.1"]</span> </span><br><span class="line">        <span class="attr">deploy:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">replicated</span>     </span><br><span class="line">          <span class="attr">replicas:</span> <span class="number">5</span>    </span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy --compose-file docker-compose.yml myservic</span><br></pre></td></tr></table></figure><h3 id="服务列表"><a href="#服务列表" class="headerlink" title="服务列表"></a>服务列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 部署列表</span></span><br><span class="line">docker stack ls</span><br><span class="line"><span class="comment">## 服务列表</span></span><br><span class="line">docker service ls</span><br></pre></td></tr></table></figure><h3 id="服务控制"><a href="#服务控制" class="headerlink" title="服务控制"></a>服务控制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker service scale myservice_alpine-replicated=10</span><br><span class="line"></span><br><span class="line"><span class="comment"># myservice_alpine-replicated scaled to 10</span></span><br><span class="line"><span class="comment"># overall progress: 10 out of 10 tasks </span></span><br><span class="line"><span class="comment"># 1/10: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="comment"># 10/10: running   [==================================================&gt;] </span></span><br><span class="line"><span class="comment"># verify: Service converged </span></span><br><span class="line"></span><br><span class="line">docker service scale myservice_alpine=10           </span><br><span class="line"><span class="comment"># myservice_alpine: scale can only be used with replicated mode</span></span><br><span class="line"><span class="comment"># 需要注意的是，如果你的服务是可以扩展的，那么服务的部署模式必须是 `replicated`</span></span><br></pre></td></tr></table></figure><h2 id="服务场景应用"><a href="#服务场景应用" class="headerlink" title="服务场景应用"></a>服务场景应用</h2><h3 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h3><h4 id="docker-compose-yml-1"><a href="#docker-compose-yml-1" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h4><figure class="highlight yml"><figcaption><span>docker-compose.yml</span><a href="/downloads/code/docker/011-adv/docker-compose.yml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">alpine:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">"daocloud.io/alpine"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["ping","127.0.0.1"]</span> </span><br><span class="line">        <span class="attr">deploy:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span>   </span><br><span class="line">    <span class="comment"># nginx </span></span><br><span class="line">    <span class="attr">nginx:</span>  <span class="comment"># 服务名称</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">"192.168.65.95:5000/nginx:goweb"</span> <span class="comment">#镜像</span></span><br><span class="line">        <span class="attr">depends_on:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">goweb</span> </span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"80:80"</span> <span class="comment"># 开放端口</span></span><br><span class="line">        <span class="attr">deploy:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span>   </span><br><span class="line">    <span class="attr">goweb:</span> <span class="comment"># 服务名称</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">"192.168.65.95:5000/goweb:goweb"</span> <span class="comment">#镜像  </span></span><br><span class="line">        <span class="attr">deploy:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">replicated</span> </span><br><span class="line">          <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h4 id="goweb-Dockerfile"><a href="#goweb-Dockerfile" class="headerlink" title="goweb Dockerfile"></a>goweb <code>Dockerfile</code></h4><figure class="highlight nginx"><figcaption><span>Dockerfile</span><a href="/downloads/code/docker/011-adv/go-web/Dockerfile">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FROM</span> daocloud.io/golang:alpine  AS  goweb-build </span><br><span class="line"><span class="comment"># 添加文件到镜像</span></span><br><span class="line">COPY ./main.go /app/ </span><br><span class="line"><span class="comment"># 切换目录，相当于cd xxx</span></span><br><span class="line">WORKDIR /app/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN CGO_ENABLED=<span class="number">0</span> GOOS=linux go build -a -installsuffix cgo -o main ./main.go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用基础镜像，这个镜像是一个空的镜像，没有任何内容。且不能执行任何命令</span></span><br><span class="line">FROM scratch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line">MAINTAINER wolferhua &lt;wolferhua<span class="variable">@qq</span>.com&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录，相当于cd xxx</span></span><br><span class="line">WORKDIR /app/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到镜像</span></span><br><span class="line">COPY --from=goweb-build /app/main /app/ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">CMD [<span class="string">"/app/main"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker build -t 192.168.65.95:5000/goweb:goweb .</span></span><br><span class="line"><span class="comment"># docker push 192.168.65.95:5000/goweb:goweb</span></span><br></pre></td></tr></table></figure><h4 id="nginx-Dockerfile"><a href="#nginx-Dockerfile" class="headerlink" title="nginx Dockerfile"></a>nginx <code>Dockerfile</code></h4><figure class="highlight nginx"><figcaption><span>Dockerfile</span><a href="/downloads/code/docker/011-adv/nginx/Dockerfile">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像, 必须存在于Dockerfile 第一行</span></span><br><span class="line"><span class="attribute">FROM</span>  daocloud.io/nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line">MAINTAINER wolferhua &lt;wolferhua<span class="variable">@qq</span>.com&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到镜像</span></span><br><span class="line"><span class="comment"># 将 index.html 添加到 /usr/share/nginx/html</span></span><br><span class="line">ADD ./index.html /usr/share/nginx/html</span><br><span class="line">ADD ./www.conf /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker build -t 192.168.65.95:5000/nginx:goweb .</span></span><br><span class="line"><span class="comment"># docker push 192.168.65.95:5000/nginx:goweb</span></span><br></pre></td></tr></table></figure><h3 id="部署服务-1"><a href="#部署服务-1" class="headerlink" title="部署服务"></a>部署服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy --compose-file docker-compose.yml goweb</span><br></pre></td></tr></table></figure><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-Docker-Swarm&quot;&gt;&lt;a href=&quot;#0-Docker-Swarm&quot; class=&quot;headerlink&quot; title=&quot;0. Docker Swarm&quot;&gt;&lt;/a&gt;0. Docker Swarm&lt;/h1&gt;&lt;p&gt;Swarm 是 Docker 社区提供的
      
    
    </summary>
    
      <category term="docker" scheme="https://wolferhua.github.io/categories/docker/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://wolferhua.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门教程（十）Docker Register</title>
    <link href="https://wolferhua.github.io/2019/08/08/docker-010/"/>
    <id>https://wolferhua.github.io/2019/08/08/docker-010/</id>
    <published>2019-08-08T06:22:48.000Z</published>
    <updated>2020-02-10T11:07:12.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p>第一章节的时候我们就讲过docker<code>仓库</code>的概念，我们提到<code>仓库</code>就是<code>镜像</code>存储的地方，有点类似于github这种平台。</p><h2 id="为什么需要自己建立仓库？"><a href="#为什么需要自己建立仓库？" class="headerlink" title="为什么需要自己建立仓库？"></a>为什么需要自己建立仓库？</h2><ol><li><p>docker的默认仓库是在国外的，所以下载效率很慢。</p></li><li><p>可以存储一些隐私数据，不被泄露。</p></li><li><p>高度可定制。</p></li></ol><h1 id="Registry-镜像"><a href="#Registry-镜像" class="headerlink" title="Registry 镜像"></a>Registry 镜像</h1><p>Docker 官方提供了一个便捷创建仓库的能力，为此创建了一个镜像来实现自建仓库。目前版本<code>V2.0</code>。</p><h2 id="运行仓库"><a href="#运行仓库" class="headerlink" title="运行仓库"></a>运行仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name registry \</span><br><span class="line">--env REGISTRY_STORAGE_DELETE_ENABLED=<span class="literal">true</span> \</span><br><span class="line">-v /home/wolferhua/workspace/runtime/registry:/var/lib/registry \</span><br><span class="line">daocloud.io/registry:2</span><br></pre></td></tr></table></figure><p>参考：  <a href="https://docs.docker.com/registry/deploying/" target="_blank" rel="noopener">仓库部署</a></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"insecure-registries"</span>: [</span><br><span class="line">        <span class="string">"192.168.65.95:5000"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不配置以上参数可能存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.65.95:5000/goweb:0                                                                                </span><br><span class="line"><span class="comment"># Error response from daemon: Get https://192.168.65.95:5000/v2/: http: server gave HTTP response to HTTPS client</span></span><br></pre></td></tr></table></figure><h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><ol><li>为本地镜像打Tag</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag goweb:0 192.168.65.95:5000/goweb:0</span><br></pre></td></tr></table></figure><ol start="2"><li>推送镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.65.95:5000/goweb:0</span><br></pre></td></tr></table></figure><ol start="3"><li>拉取镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.65.95:5000/goweb:0</span><br></pre></td></tr></table></figure><h1 id="Registry-API"><a href="#Registry-API" class="headerlink" title="Registry API"></a>Registry API</h1><h2 id="基本信息-v2"><a href="#基本信息-v2" class="headerlink" title="基本信息 /v2/"></a>基本信息 <code>/v2/</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://192.168.65.95:5000/v2/'</span> -X GET</span><br></pre></td></tr></table></figure><h2 id="镜像列表-v2-catalog"><a href="#镜像列表-v2-catalog" class="headerlink" title="镜像列表 /v2/_catalog"></a>镜像列表 <code>/v2/_catalog</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://192.168.65.95:5000/v2/_catalog'</span> -X GET</span><br></pre></td></tr></table></figure><h2 id="标签列表-v2-lt-image-gt-tags-list"><a href="#标签列表-v2-lt-image-gt-tags-list" class="headerlink" title="标签列表 /v2/&lt;image&gt;/tags/list"></a>标签列表 <code>/v2/&lt;image&gt;/tags/list</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://192.168.65.95:5000/v2/&lt;image&gt;/tags/list'</span> -X GET</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl 'http://192.168.65.95:5000/v2/goweb/tags/list' -X GET</span></span><br></pre></td></tr></table></figure><h2 id="获取镜像某个版本构建信息-v2-lt-image-gt-manifests-lt-referevce-gt"><a href="#获取镜像某个版本构建信息-v2-lt-image-gt-manifests-lt-referevce-gt" class="headerlink" title="获取镜像某个版本构建信息  /v2/&lt;image&gt;/manifests/&lt;referevce&gt;"></a>获取镜像某个版本构建信息  <code>/v2/&lt;image&gt;/manifests/&lt;referevce&gt;</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -v <span class="string">'http://192.168.65.95:5000/v2/&lt;image&gt;/manifests/&lt;referevce&gt;'</span> -X GET</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -v 'http://192.168.65.95:5000/v2/goweb/manifests/0' -X GET</span></span><br></pre></td></tr></table></figure><blockquote><p>返回头里边的： <code>Docker-Content-Digest： xxx</code> 就是删除时的标识。</p></blockquote><h2 id="删除镜像某个版本构建信息-v2-lt-image-gt-manifests-lt-reference-gt"><a href="#删除镜像某个版本构建信息-v2-lt-image-gt-manifests-lt-reference-gt" class="headerlink" title="删除镜像某个版本构建信息 /v2/&lt;image&gt;/manifests/&lt;reference&gt;"></a>删除镜像某个版本构建信息 <code>/v2/&lt;image&gt;/manifests/&lt;reference&gt;</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://192.168.65.95:5000/v2/&lt;image&gt;/manifests/&lt;referevce&gt;'</span> -X DELETE</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl 'http://192.168.65.95:5000/v2/goweb/manifests/sha256:68cf2b953f47d2569eac0855216c87944409ae4cc0648b90c8ea78e36ffea70a' -X DELETE</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; class=&quot;headerlink&quot; title=&quot;仓库&quot;&gt;&lt;/a&gt;仓库&lt;/h1&gt;&lt;p&gt;第一章节的时候我们就讲过docker&lt;code&gt;仓库&lt;/code&gt;的概念，我们提到&lt;code&gt;仓库&lt;/code&gt;就是&lt;code&gt;镜像&lt;/co
      
    
    </summary>
    
      <category term="docker" scheme="https://wolferhua.github.io/categories/docker/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://wolferhua.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SSH私钥是OPENSSH导致程序认证异常问题</title>
    <link href="https://wolferhua.github.io/2019/06/25/ssh-private-key-openssh/"/>
    <id>https://wolferhua.github.io/2019/06/25/ssh-private-key-openssh/</id>
    <published>2019-06-25T01:20:13.000Z</published>
    <updated>2020-02-10T11:07:12.017Z</updated>
    
    <content type="html"><![CDATA[<p>公司项目部分使用<code>ruby on rails</code>构建，最近由于线上服务器权限控制问题。导致一个很老系统不能正常发布。程序异常如下</p><p><strong>执行命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cap</span> production deploy</span><br></pre></td></tr></table></figure><p><strong>异常返回</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">** Invoke production (first_time)</span><br><span class="line">** Execute production</span><br><span class="line">** Invoke load:defaults (first_time)</span><br><span class="line">** Execute load:defaults</span><br><span class="line">** Invoke bundler:map_bins (first_time)</span><br><span class="line">** Execute bundler:map_bins</span><br><span class="line">** Invoke deploy:set_rails_env (first_time)</span><br><span class="line">** Execute deploy:set_rails_env</span><br><span class="line">** Invoke deploy:set_linked_dirs (first_time)</span><br><span class="line">** Execute deploy:set_linked_dirs</span><br><span class="line">** Invoke deploy:set_rails_env </span><br><span class="line">** Invoke rvm:hook (first_time)</span><br><span class="line">** Execute rvm:hook</span><br><span class="line">DEBUG [287814d6] Running /usr/bin/env [ -d ~/.rvm ] as user_name@192.168.2.63</span><br><span class="line">DEBUG [287814d6] Command: [ -d ~/.rvm ]</span><br><span class="line">cap aborted!</span><br><span class="line">Net::SSH::AuthenticationFailed: Authentication failed for user user_name@192.168.2.63</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/net-ssh-3.0.2/lib/net/ssh.rb:242:in `start&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/connection_pool.rb:95:in `call&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/connection_pool.rb:95:in `create_new_entry&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/connection_pool.rb:38:in `checkout&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/netssh.rb:134:in `with_ssh&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/netssh.rb:87:in `execute_command&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/abstract.rb:121:in `block in create_command_and_execute&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/abstract.rb:121:in `tap&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/abstract.rb:121:in `create_command_and_execute&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/abstract.rb:34:in `test&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/capistrano-rvm-0.1.2/lib/capistrano/tasks/rvm.rake:21:in `block (3 levels) in &lt;top (required)&gt;&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/abstract.rb:15:in `instance_exec&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/backends/abstract.rb:15:in `run&apos;</span><br><span class="line">/home/user_name/.rvm/gems/ruby-2.2.1@loyo/gems/sshkit-1.8.1/lib/sshkit/runners/parallel.rb:13:in `block (2 levels) in execute&apos;</span><br><span class="line">Tasks: TOP =&gt; rvm:hook</span><br></pre></td></tr></table></figure><!-- Net::SSH::AuthenticationFailed: Authentication failed for user user_name@192.168.2.63 --><p>按照网上查找的部分资料:</p><ol><li><a href="https://stackoverflow.com/questions/41369406/netsshauthenticationfailed-authentication-failed-for-user" target="_blank" rel="noopener">Net::SSH::AuthenticationFailed: Authentication failed for user</a></li><li><a href="https://github.com/net-ssh/net-ssh/issues/175" target="_blank" rel="noopener">Net::SSH::AuthenticationFailed: Authentication failed for user root #175</a></li></ol><p>并不能解决该问题，然后仔细对比线上代码。和其他程序样本对比，最后发现ssh私钥 <code>-----BEGIN XXXXXX PRIVATE KEY-----</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/user_name/.ssh/id_rsa:-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">/home/user_name/.ssh/www_id_rsa:-----BEGIN RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>然后在服务器上重新生成一个<code>BEGIN RSA PRIVATE KEY</code> 的私钥，测试发现通过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"新的私钥"</span> -f new_id_rsa -N <span class="string">""</span></span><br></pre></td></tr></table></figure><p>不过我再次尝试用我的电脑生成一个私钥，但是生成的私钥还是<code>BEGIN OPENSSH PRIVATE KEY</code>。最终对比ssh版本发现版本不一致:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地</span></span><br><span class="line">$ ssh -V</span><br><span class="line">OpenSSH_8.0p1, OpenSSL 1.1.1c  28 May 2019</span><br><span class="line"><span class="comment"># 服务器 </span></span><br><span class="line">$ ssh ssh_ly ssh -V                              </span><br><span class="line">OpenSSH_7.2p2 Ubuntu-4ubuntu2.8, OpenSSL 1.0.2g  1 Mar 2016</span><br></pre></td></tr></table></figure><p>查找资料发现 <a href="https://serverfault.com/questions/939909/ssh-keygen-does-not-create-rsa-private-key" target="_blank" rel="noopener">ssh-keygen does not create RSA private key</a>，需要添加参数 <code>-m PEM</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"新的私钥"</span> -f pem_id_rsa -N <span class="string">""</span> -m PEM</span><br></pre></td></tr></table></figure><p>使用新的私钥测试通过。总算解决了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司项目部分使用&lt;code&gt;ruby on rails&lt;/code&gt;构建，最近由于线上服务器权限控制问题。导致一个很老系统不能正常发布。程序异常如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行命令&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
      <category term="linux" scheme="https://wolferhua.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
      <category term="ssh" scheme="https://wolferhua.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门教程（九）Docker Compose</title>
    <link href="https://wolferhua.github.io/2019/05/30/docker-009/"/>
    <id>https://wolferhua.github.io/2019/05/30/docker-009/</id>
    <published>2019-05-30T05:22:27.000Z</published>
    <updated>2020-02-10T11:07:12.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0、-什么是-Docker-Compose"><a href="#0、-什么是-Docker-Compose" class="headerlink" title="0、 什么是 Docker Compose"></a>0、 什么是 <code>Docker Compose</code></h1><p><code>Docker Compose</code>是一个使用python写的批量操作docker的一个自动化工具。</p><h2 id="为什么要用？"><a href="#为什么要用？" class="headerlink" title="为什么要用？"></a>为什么要用？</h2><p>通过之前的学习，我们使用的镜像越来越多。每个镜像都有如下操作：</p><ol><li>RUN</li><li>挂载磁盘</li><li>开放端口</li><li>获取或者构建镜像</li><li>……</li></ol><p>如果只有一个还好，当我们的镜像使用的越来越多。那么操作就会越来越复杂……，如此<code>Docker Compose</code>应运而生，我们一起来学习一下。</p><h1 id="1、-安装"><a href="#1、-安装" class="headerlink" title="1、 安装"></a>1、 安装</h1><p>由于<code>Docker Compose</code>是基于python开发的，所以必须保证机器上有python环境。</p><h2 id="Python-环境检查"><a href="#Python-环境检查" class="headerlink" title="Python 环境检查"></a>Python 环境检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python --version</span><br><span class="line"><span class="comment"># Python 3.7.3</span></span><br><span class="line"></span><br><span class="line">pip --version</span><br><span class="line"><span class="comment"># pip 19.0.3 from /usr/lib/python3.7/site-packages/pip (python 3.7)</span></span><br></pre></td></tr></table></figure><h2 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># Collecting docker-compose</span></span><br><span class="line"><span class="comment">#   Downloading ......</span></span><br><span class="line"><span class="comment"># Successfully installed ...... docker-compose-1.24.0</span></span><br></pre></td></tr></table></figure><h2 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br><span class="line"><span class="comment"># docker-compose version 1.24.0, build 0aa5906</span></span><br><span class="line"><span class="comment"># docker-py version: 3.7.2</span></span><br><span class="line"><span class="comment"># CPython version: 3.7.3</span></span><br><span class="line"><span class="comment"># OpenSSL version: OpenSSL 1.1.1b  26 Feb 2019</span></span><br></pre></td></tr></table></figure><h1 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">build              <span class="comment"># 构建或者重新构建服务镜像 </span></span><br><span class="line">config             <span class="comment"># 验证配置文件</span></span><br><span class="line">create             <span class="comment"># 创建服务</span></span><br><span class="line">down               <span class="comment"># 停止并删除容器、网络、镜像 </span></span><br><span class="line"><span class="built_in">exec</span>               <span class="comment"># 在运行容器中执行命令 </span></span><br><span class="line">images             <span class="comment"># 显示使用的镜像</span></span><br><span class="line"><span class="built_in">kill</span>               <span class="comment"># kill 运行容器</span></span><br><span class="line">logs               <span class="comment"># 显示容器日志</span></span><br><span class="line">pause              <span class="comment"># 按暂停容器 </span></span><br><span class="line">ps                 <span class="comment"># 显示容器</span></span><br><span class="line">pull               <span class="comment"># 拉去使用的镜像</span></span><br><span class="line">push               <span class="comment"># 推送镜像</span></span><br><span class="line">restart            <span class="comment"># 重启服务</span></span><br><span class="line">rm                 <span class="comment"># 删除停止容器</span></span><br><span class="line">run                <span class="comment"># 运行容器</span></span><br><span class="line">scale              <span class="comment"># 设置服务容器数</span></span><br><span class="line">start              <span class="comment"># 启动容器</span></span><br><span class="line">stop               <span class="comment"># 停止容器</span></span><br><span class="line">top                <span class="comment"># 显示正在运行程序</span></span><br><span class="line">up                 <span class="comment"># 创建并启动容器</span></span><br></pre></td></tr></table></figure><h1 id="3-docker-compose-yml"><a href="#3-docker-compose-yml" class="headerlink" title="3. docker-compose.yml"></a>3. <code>docker-compose.yml</code></h1><p><code>docker-compose</code> 是一个批量操作的工具，我们需要将我们的操作写在 <code>docker-compose.yml</code> 。这样<code>docker-compose</code>就可以根据文件里边的定义，执行操作。</p><h2 id="内容解析"><a href="#内容解析" class="headerlink" title="内容解析"></a>内容解析</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">version</span>                         <span class="comment"># 指定 compose 文件的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## service 定义 ##############</span></span><br><span class="line"></span><br><span class="line"><span class="string">services</span>                    <span class="comment"># 定义所有的 service 信息, services 下面的第一级别的 key 是一个 service 的名称 </span></span><br><span class="line">    <span class="string">build</span>                   <span class="comment"># 自动构建定</span></span><br><span class="line">        <span class="string">context</span>             <span class="comment"># dockerfile 文件目录</span></span><br><span class="line">        <span class="string">dockerfile</span>          <span class="comment"># dockerfile 文件名称</span></span><br><span class="line">    <span class="string">command</span>                 <span class="comment"># 容器启动后执行命令，会覆盖镜像默认CMD。支持 shell 格式和 [] 格式</span></span><br><span class="line">    <span class="string">entrypoint</span>              <span class="comment"># 容器启动后执行命令，会覆盖镜像默认entrypoint。支持 shell 格式和 [] 格式</span></span><br><span class="line">    <span class="string">image</span>                   <span class="comment"># 指定镜像</span></span><br><span class="line">    <span class="string">environment</span>             <span class="comment"># 设置环境变量参数</span></span><br><span class="line">    <span class="string">container_name</span>          <span class="comment"># 指定容器的名称 (等同于 docker run --name 的作用)</span></span><br><span class="line">    <span class="string">expose</span>                  <span class="comment"># 暴露端口, 但是不能和宿主机建立映射关系, 类似于 Dockerfile 的 EXPOSE 指令</span></span><br><span class="line">    <span class="string">ports</span>                   <span class="comment"># 建立宿主机和容器之间的端口映射关系, ports 支持两种语法格式</span></span><br><span class="line">                              <span class="comment"># SHORT 语法格式示例:</span></span><br><span class="line">                              <span class="comment">#     - "3000"                            # 暴露容器的 3000 端口, 宿主机的端口由 docker 随机映射一个没有被占用的端口</span></span><br><span class="line">                              <span class="comment">#     - "3000-3005"                       # 暴露容器的 3000 到 3005 端口, 宿主机的端口由 docker 随机映射没有被占用的端口</span></span><br><span class="line">                              <span class="comment">#     - "8000:8000"                       # 容器的 8000 端口和宿主机的 8000 端口建立映射关系</span></span><br><span class="line">                              <span class="comment">#     - "9090-9091:8080-8081"</span></span><br><span class="line">                              <span class="comment">#     - "127.0.0.1:8001:8001"             # 指定映射宿主机的指定地址的</span></span><br><span class="line">                              <span class="comment">#     - "127.0.0.1:5000-5010:5000-5010"   </span></span><br><span class="line">                              <span class="comment">#     - "6060:6060/udp"                   # 指定协议</span></span><br><span class="line">    <span class="string">volumes</span>                 <span class="comment"># 数据卷挂载</span></span><br><span class="line">                              <span class="comment">#     volumes:</span></span><br><span class="line">                              <span class="comment">#         - /var/lib/mysql                # 映射容器内的 /var/lib/mysql 到宿主机的一个随机目录中</span></span><br><span class="line">                              <span class="comment">#         - /opt/data:/var/lib/mysql      # 映射容器内的 /var/lib/mysql 到宿主机的 /opt/data</span></span><br><span class="line">                              <span class="comment">#         - ./cache:/tmp/cache            # 映射容器内的 /var/lib/mysql 到宿主机 compose 文件所在的位置</span></span><br><span class="line">                              <span class="comment">#         - ~/configs:/etc/configs/:ro    # 映射容器宿主机的目录到容器中去, 权限只读</span></span><br><span class="line">                              <span class="comment">#         - datavolume:/var/lib/mysql     # datavolume 为 volumes 顶级键定义的目录, 在此处直接调用</span></span><br><span class="line">    <span class="string">deploy</span>                  <span class="comment"># v3 版本以上, 指定与部署和运行服务相关的配置, deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm</span></span><br><span class="line">        <span class="string">resources</span>            <span class="comment"># 资源限制</span></span><br><span class="line">            <span class="string">limits</span>          <span class="comment"># 设置容器的资源限制</span></span><br><span class="line">                <span class="string">cpus</span>        <span class="comment"># 设置该容器最多只能使用 50% 的 CPU  : "0.5" </span></span><br><span class="line">                <span class="string">memory</span>      <span class="comment"># 设置该容器最多只能使用 50M 的内存空间 : 50M   </span></span><br><span class="line">            <span class="string">reservations</span>    <span class="comment"># 设置为容器预留的系统资源(随时可用)</span></span><br><span class="line">                <span class="string">cpus</span>        <span class="comment"># 为该容器保留 20% 的 CPU : "0.2"  </span></span><br><span class="line">                <span class="string">memory</span>      <span class="comment"># 为该容器保留 20M 的内存空间: 20M </span></span><br><span class="line">        <span class="string">mode</span>                <span class="comment"># 指定 deploy 的模式</span></span><br><span class="line">            <span class="string">global</span>          <span class="comment"># 每个集群节点都只有一个容器</span></span><br><span class="line">            <span class="string">replicated</span>      <span class="comment"># 用户可以指定集群中容器的数量(默认)</span></span><br><span class="line">        <span class="string">replicas</span>              <span class="comment"># deploy 的 mode 为 replicated 时, 指定容器副本的数量</span></span><br><span class="line">    <span class="string">depends_on</span>              <span class="comment"># 定义容器启动顺序 (此选项解决了容器之间的依赖关系， 此选项在 v3 版本中 使用 swarm 部署时将忽略该选项)</span></span><br><span class="line">                              <span class="comment"># version: '3'</span></span><br><span class="line">                              <span class="comment">#     services:</span></span><br><span class="line">                              <span class="comment">#         web:</span></span><br><span class="line">                              <span class="comment">#             build: .</span></span><br><span class="line">                              <span class="comment">#             depends_on:</span></span><br><span class="line">                              <span class="comment">#                 - db      </span></span><br><span class="line">                              <span class="comment">#                 - redis  </span></span><br><span class="line">                              <span class="comment">#         redis:</span></span><br><span class="line">                              <span class="comment">#             image: redis</span></span><br><span class="line">                              <span class="comment">#         db:</span></span><br><span class="line">                              <span class="comment">#             image: postgres    </span></span><br><span class="line">    <span class="string">restart</span>                 <span class="comment"># 重启策略</span></span><br><span class="line">                            <span class="comment">#     no                    # 禁止自动重启容器(默认)</span></span><br><span class="line">                            <span class="comment">#     always                # 无论如何容器都会重启</span></span><br><span class="line">                            <span class="comment">#     on-failure            # 当出现 on-failure 报错时, 容器重新启动    </span></span><br><span class="line">    <span class="string">networks</span>                <span class="comment"># 将容器加入指定网络 (等同于 docker network connect 的作用), networks 可以位于 compose 文件顶级键和 services 键的二级键</span></span><br><span class="line">        <span class="string">aliases</span>             <span class="comment"># 同一网络上的容器可以使用服务名称或别名连接到其中一个服务的容器</span></span><br><span class="line">        <span class="string">ipv4_address</span>        <span class="comment"># IP V4 格式</span></span><br><span class="line">        <span class="string">ipv6_address</span>        <span class="comment"># IP V6 格式    </span></span><br><span class="line">    <span class="string">extra_hosts</span>             <span class="comment"># 添加 host 记录到容器中的 /etc/hosts 中 (等同于 docker run --add-host 的作用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############## network 定义 ##############</span></span><br><span class="line"><span class="string">networks</span>          <span class="comment"># 定义 networks 信息</span></span><br><span class="line">    <span class="string">driver</span>                  <span class="comment"># 指定网络模式, 大多数情况下, 它 bridge 于单个主机和 overlay Swarm 上</span></span><br><span class="line">        <span class="string">bridge</span>              <span class="comment"># Docker 默认使用 bridge 连接单个主机上的网络</span></span><br><span class="line">        <span class="string">overlay</span>             <span class="comment"># overlay 驱动程序创建一个跨多个节点命名的网络</span></span><br><span class="line">        <span class="string">host</span>                <span class="comment"># 共享主机网络名称空间(等同于 docker run --net=host)</span></span><br><span class="line">        <span class="string">none</span>                <span class="comment"># 等同于 docker run --net=none</span></span><br><span class="line">    <span class="string">attachable</span>              <span class="comment"># driver 为 overlay 时使用, 如果设置为 true 则除了服务之外，独立容器也可以附加到该网络; 如果独立容器连接到该网络，则它可以与其他 Docker 守护进程连接到的该网络的服务和独立容器进行通信</span></span><br><span class="line">    <span class="string">ipam</span>                    <span class="comment"># 自定义 IPAM 配置. 这是一个具有多个属性的对象, 每个属性都是可选的</span></span><br><span class="line">        <span class="string">driver</span>              <span class="comment"># IPAM 驱动程序, bridge 或者 default</span></span><br><span class="line">        <span class="string">config</span>              <span class="comment"># 配置项</span></span><br><span class="line">            <span class="string">subnet</span>          <span class="comment"># CIDR格式的子网，表示该网络的网段</span></span><br><span class="line">    <span class="string">external</span>                <span class="comment"># 外部网络, 如果设置为 true 则 docker-compose up 不会尝试创建它, 如果它不存在则引发错误</span></span><br><span class="line">    <span class="string">name</span>                    <span class="comment"># v3.5 以上版本, 为此网络设置名称</span></span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>基础介绍以后我们先来，将之前用的镜像。通过docker-compose 来管理。</p></blockquote><h3 id="1-准备镜像"><a href="#1-准备镜像" class="headerlink" title="1. 准备镜像"></a>1. 准备镜像</h3><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight nginx"><figcaption><span>www.conf</span><a href="/downloads/code/docker/009-nginx/www.dev.conf">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">}  </span><br><span class="line">server{</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> www-wh.anycps.com;  </span><br><span class="line">    <span class="attribute">location</span> / { </span><br><span class="line">        <span class="attribute">proxy_pass</span> http://goweb:8080;</span><br><span class="line">        <span class="attribute">proxy_redirect</span>     <span class="literal">off</span>; </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><figure class="highlight nginx"><figcaption><span>Dockerfile</span><a href="/downloads/code/docker/009-nginx/Dockerfile">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像, 必须存在于Dockerfile 第一行</span></span><br><span class="line"><span class="attribute">FROM</span>  daocloud.io/nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line">MAINTAINER wolferhua &lt;wolferhua<span class="variable">@qq</span>.com&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到镜像</span></span><br><span class="line"><span class="comment"># 将 index.html 添加到 /usr/share/nginx/html</span></span><br><span class="line">ADD ./index.html /usr/share/nginx/html</span><br><span class="line">ADD ./www.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure><h4 id="Go-Web"><a href="#Go-Web" class="headerlink" title="Go Web"></a>Go Web</h4><h5 id="Go-Code"><a href="#Go-Code" class="headerlink" title="Go Code"></a>Go Code</h5><figure class="highlight golang"><figcaption><span>main.go</span><a href="/downloads/code/docker/004-go/main.go">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ( </span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> helloHandler <span class="keyword">struct</span>{}</span><br><span class="line"><span class="keyword">var</span> host = <span class="string">""</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *helloHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> {</span><br><span class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"text/html; charset=UTF-8"</span> )</span><br><span class="line">w.Header().Set(<span class="string">"Content-Transfer-Encoding"</span>, <span class="string">"quoted-printable"</span>)</span><br><span class="line">    w.Write([]<span class="keyword">byte</span>(<span class="string">"Host："</span>+host+<span class="string">"&lt;br&gt; Hello, world! from golang."</span>)) <span class="comment">//输出内容</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">host, _ = os.Hostname() <span class="comment">//获取当前机器名称</span></span><br><span class="line">http.Handle(<span class="string">"/"</span>, &amp;helloHandler{})</span><br><span class="line">log.Println(<span class="string">"Start web service: http://127.0.0.1:8080"</span>)</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)) <span class="comment">//指定端口</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h5 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><figure class="highlight nginx"><figcaption><span>Dockerfile</span><a href="/downloads/code/docker/004-go/Dockerfile">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像, 必须存在于Dockerfile 第一行</span></span><br><span class="line"><span class="attribute">FROM</span> daocloud.io/golang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line">MAINTAINER wolferhua &lt;wolferhua<span class="variable">@qq</span>.com&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到镜像</span></span><br><span class="line">ADD . /usr/src/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录，相当于cd xxx</span></span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行编译g</span></span><br><span class="line">RUN go build -o app main.go </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将编译后的移动到 /app 目录</span></span><br><span class="line">RUN mv /usr/src/app/app .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口，在运行时，并不会正在的开放端口。还是需要-p</span></span><br><span class="line"><span class="comment"># 这里只是标明需要使用的端口</span></span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像启动时执行的命令</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"./app"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建命令</span></span><br><span class="line"><span class="comment">#docker build -t goweb .</span></span><br></pre></td></tr></table></figure><h3 id="2-docker-compose-yml"><a href="#2-docker-compose-yml" class="headerlink" title="2. docker-compose.yml"></a>2. <code>docker-compose.yml</code></h3><figure class="highlight yml"><figcaption><span>docker-compose.yml</span><a href="/downloads/code/docker/009-nginx/docker-compose.dev.yml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="comment"># nginx </span></span><br><span class="line">    <span class="attr">nginx:</span>  <span class="comment"># 服务名称</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">"nginx"</span> <span class="comment">#镜像</span></span><br><span class="line">        <span class="attr">depends_on:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">goweb</span> </span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"80:80"</span> <span class="comment"># 开放端口</span></span><br><span class="line">    <span class="attr">goweb:</span> <span class="comment"># 服务名称</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">"goweb"</span> <span class="comment">#镜像</span></span><br><span class="line">    <span class="attr">alpine:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">"daocloud.io/alpine"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["ping","127.0.0.1"]</span></span><br></pre></td></tr></table></figure><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3. 启动"></a>3. 启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># Creating network "009-nginx_default" with the default driver</span></span><br><span class="line"><span class="comment"># Creating 009-nginx_alpine_1 ... done</span></span><br><span class="line"><span class="comment"># Creating 009-nginx_goweb_1  ... done</span></span><br><span class="line"><span class="comment"># Creating 009-nginx_nginx_1  ... done</span></span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>打开网址： <a href="http://www-wh.anycps.com/" target="_blank" rel="noopener">http://www-wh.anycps.com/</a></p><img src="//wolferhua.gitee.io/blog/images/docker/009-1.png"> <h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ol><li>通过之前几节课程，细心的小伙伴可能都发现了。在使用compose之后我们并没有配置网络，但是测试以后发现<code>nginx</code>和<code>goweb</code>是互通的，表明已经存在链接。因为<code>docker-compose</code>会自动创建一个网络，以供内部通信。</li><li>实际操作以后发现，步骤还是挺多的，抛开配置文件不说。我们还需要自己去对镜像打包，所以还不够。我们还需要更加自动一点。</li></ol><h1 id="4-深入-docker-compose-yml"><a href="#4-深入-docker-compose-yml" class="headerlink" title="4. 深入 docker-compose.yml"></a>4. 深入 <code>docker-compose.yml</code></h1><h2 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h2><figure class="highlight yml"><figcaption><span>docker-compose.yml</span><a href="/downloads/code/docker/009-nginx/docker-compose.yml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">nginx:</span> </span><br><span class="line">        <span class="comment"># 自动构建</span></span><br><span class="line">        <span class="attr">build:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span> <span class="comment"># 指定构建目录</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">"test/nginx:compose"</span> <span class="comment">#指定镜像名称，打包以后镜像就叫这个名称</span></span><br><span class="line">        <span class="attr">depends_on:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">goweb</span> </span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">"80:80"</span> </span><br><span class="line">    <span class="attr">goweb:</span> </span><br><span class="line">        <span class="attr">build:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">"../004-go"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">"test/goweb:compose"</span> </span><br><span class="line">    <span class="attr">alpine:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">"daocloud.io/alpine"</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["ping","127.0.0.1"]</span></span><br></pre></td></tr></table></figure><h2 id="服务扩容（Scale）"><a href="#服务扩容（Scale）" class="headerlink" title="服务扩容（Scale）"></a>服务扩容（Scale）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将goweb 扩容到5个服务</span></span><br><span class="line">docker-compose scale goweb=5</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>扩容以后的服务，自动会被docker dns 进行dns负载，所以每次请求的相同服务会得到不同结果。</li><li>如果启用了对外端口的服务，不能进行扩容。因为端口占用。</li><li>由于nginx为了提升效率，会缓存dns解析结果，所以默认的nginx 代理配置。将无法实现负载。</li></ol><p><strong>实现负载的nginx配置</strong></p><figure class="highlight nginx"><figcaption><span>www.conf</span><a href="/downloads/code/docker/009-nginx/www.conf">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; </span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">} </span><br><span class="line"><span class="comment"># 配置参考 </span></span><br><span class="line"><span class="comment"># docker内置dnsserver工作机制: http://dockone.io/article/2316</span></span><br><span class="line"><span class="comment"># Using Containers to Learn Nginx Reverse Proxy : https://medium.com/@joatmon08/using-containers-to-learn-nginx-reverse-proxy-6be8ac75a757</span></span><br><span class="line">server{</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> www-wh.anycps.com;  </span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="comment"># 设置dns 服务，docker dns默认ip  127.0.0.11</span></span><br><span class="line">        <span class="attribute">resolver</span> <span class="number">127.0.0.11</span> valid=<span class="number">5s</span>;</span><br><span class="line">        <span class="comment"># 设置代理</span></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$upstream_endpoint</span> http://goweb:8080;</span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$upstream_endpoint</span>;</span><br><span class="line">        <span class="attribute">proxy_redirect</span>     <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-Host <span class="variable">$server_name</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0、-什么是-Docker-Compose&quot;&gt;&lt;a href=&quot;#0、-什么是-Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;0、 什么是 Docker Compose&quot;&gt;&lt;/a&gt;0、 什么是 &lt;code&gt;Docker Com
      
    
    </summary>
    
      <category term="docker" scheme="https://wolferhua.github.io/categories/docker/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://wolferhua.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门教程（八）Docker Network</title>
    <link href="https://wolferhua.github.io/2019/05/22/docker-008/"/>
    <id>https://wolferhua.github.io/2019/05/22/docker-008/</id>
    <published>2019-05-22T06:33:01.000Z</published>
    <updated>2020-02-10T11:07:12.016Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们使用了，<code>IP</code>和<code>link</code>方式对容器进行关联。<code>IP</code>方式不太灵活，但是操作传统比较简单。<code>link</code> 实际上是 <code>network</code> 的简单应用，程序更加灵活了。但是遗憾的是他已经过时了，针对这种情况。docker 推荐我们使用 <code>network</code>，那么接下来我们就一起来学习一下吧。</p><h1 id="基础演示"><a href="#基础演示" class="headerlink" title="基础演示"></a>基础演示</h1><h2 id="0-网络状态演示"><a href="#0-网络状态演示" class="headerlink" title="0. 网络状态演示"></a>0. 网络状态演示</h2><h3 id="启用两个镜像容器"><a href="#启用两个镜像容器" class="headerlink" title="启用两个镜像容器"></a>启用两个镜像容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alpine1</span></span><br><span class="line">docker run -d -it --rm --name alpine1 daocloud.io/alpine ping 127.0.0.1</span><br><span class="line"><span class="comment"># alpie2</span></span><br><span class="line">docker run -d -it --rm --name alpine2 daocloud.io/alpine ping 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="进入任意一个容器尝试联通另一个容器"><a href="#进入任意一个容器尝试联通另一个容器" class="headerlink" title="进入任意一个容器尝试联通另一个容器"></a>进入任意一个容器尝试联通另一个容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入alpine2 ping alpine1</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it alpine2 ping alpine1</span><br><span class="line">ping: bad address <span class="string">'alpine1'</span></span><br></pre></td></tr></table></figure><p>可以发现两个容器之间是互不相通的。当然这个是相对的，其实我们通过<code>容器ip</code>是可以连接的。只是不能通过名称连接而已，之前我们使用<code>link</code>方式让两个容器互相关联起来。接下来我们开始使用<code>network</code>的方式。</p><h2 id="1-创建network"><a href="#1-创建network" class="headerlink" title="1. 创建network"></a>1. 创建<code>network</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建网络</span></span><br><span class="line">docker network create --driver bridge alpine-net</span><br><span class="line"><span class="comment">## 查看网络列表</span></span><br><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># NETWORK ID          NAME                DRIVER              SCOPE</span></span><br><span class="line"><span class="comment"># 4058a6d84e03        alpine-net          bridge              local</span></span><br><span class="line"><span class="comment"># 529130bc5057        bridge              bridge              local</span></span><br><span class="line"><span class="comment"># 42c01d942ee6        docker_gwbridge     bridge              local</span></span><br><span class="line"><span class="comment"># 452d8e255625        host                host                local</span></span><br><span class="line"><span class="comment"># rnxd9mcs0v3y        ingress             overlay             swarm</span></span><br></pre></td></tr></table></figure><h2 id="2-将容器加入网络"><a href="#2-将容器加入网络" class="headerlink" title="2. 将容器加入网络"></a>2. 将容器加入网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## alpine1</span></span><br><span class="line">docker network connect alpine-net alpine1  </span><br><span class="line"><span class="comment">## alpine2</span></span><br><span class="line">docker network connect alpine-net alpine2</span><br></pre></td></tr></table></figure><h2 id="3-进入任意一个容器尝试联通另一个容器"><a href="#3-进入任意一个容器尝试联通另一个容器" class="headerlink" title="3. 进入任意一个容器尝试联通另一个容器"></a>3. 进入任意一个容器尝试联通另一个容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入alpine2 ping alpine1</span></span><br><span class="line">docker <span class="built_in">exec</span> -it alpine2 ping -c 2 alpine1</span><br><span class="line"><span class="comment"># PING alpine1 (172.19.0.2): 56 data bytes</span></span><br><span class="line"><span class="comment"># 64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.147 ms</span></span><br><span class="line"><span class="comment"># 64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.167 ms</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># --- alpine1 ping statistics ---</span></span><br><span class="line"><span class="comment"># 2 packets transmitted, 2 packets received, 0% packet loss</span></span><br><span class="line"><span class="comment"># round-trip min/avg/max = 0.147/0.157/0.167 ms</span></span><br></pre></td></tr></table></figure><h2 id="4-启动容器并加入网络"><a href="#4-启动容器并加入网络" class="headerlink" title="4. 启动容器并加入网络"></a>4. 启动容器并加入网络</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it --rm --name  alpine3 --network alpine-net daocloud.io/alpine ping 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入alpine2 ping alpine3</span></span><br><span class="line">docker <span class="built_in">exec</span> -it alpine2 ping -c 2 alpine3</span><br><span class="line"><span class="comment"># PING alpine3 (172.19.0.4): 56 data bytes</span></span><br><span class="line"><span class="comment"># 64 bytes from 172.19.0.4: seq=0 ttl=64 time=0.222 ms</span></span><br><span class="line"><span class="comment"># 64 bytes from 172.19.0.4: seq=1 ttl=64 time=0.184 ms</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --- alpine3 ping statistics ---</span></span><br><span class="line"><span class="comment"># 2 packets transmitted, 2 packets received, 0% packet loss</span></span><br><span class="line"><span class="comment"># round-trip min/avg/max = 0.184/0.203/0.222 ms</span></span><br></pre></td></tr></table></figure><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><blockquote><p>上一篇我们使用了<code>IP</code>、<code>link</code>的方式来关联镜像，IP方式笨拙，link方式古老。今天我们已经学习了network方式，那么我们就尝试使用network来部署。</p></blockquote><h2 id="1-创建network-1"><a href="#1-创建network-1" class="headerlink" title="1. 创建network"></a>1. 创建<code>network</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge app-net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看列表</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="comment"># NETWORK ID          NAME                DRIVER              SCOPE</span></span><br><span class="line"><span class="comment"># 4058a6d84e03        alpine-net          bridge              local</span></span><br><span class="line"><span class="comment"># 42ce438d3407        app-net             bridge              local</span></span><br></pre></td></tr></table></figure><h2 id="2-启动goweb容器"><a href="#2-启动goweb容器" class="headerlink" title="2. 启动goweb容器"></a>2. 启动goweb容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理已经存在的容器</span></span><br><span class="line">docker rm -f goweb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动新容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name goweb \</span><br><span class="line">-d \</span><br><span class="line">--network app-net \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">--restart=always \</span><br><span class="line">goweb:scratch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --network app-net # 指定容器network</span></span><br></pre></td></tr></table></figure><h2 id="2-启动nginx容器"><a href="#2-启动nginx容器" class="headerlink" title="2. 启动nginx容器"></a>2. 启动nginx容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理已经存在的容器</span></span><br><span class="line">docker rm -f nginx80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用新容器</span></span><br><span class="line"><span class="comment"># 容器启动基本没有区别，但是取消了 --link 增加 --network 选项</span></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">--name nginx80 \</span><br><span class="line">--network app-net \</span><br><span class="line">-d \</span><br><span class="line">-v ~/workspace/www/goweb.conf:/etc/nginx/conf.d/goweb.conf \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--restart=always \</span><br><span class="line">daocloud.io/nginx</span><br></pre></td></tr></table></figure><h2 id="3-测试访问"><a href="#3-测试访问" class="headerlink" title="3. 测试访问"></a>3. 测试访问</h2><p>打开网址：<a href="http://www-wh.anycps.com" target="_blank" rel="noopener">http://www-wh.anycps.com</a></p><img src="//wolferhua.gitee.io/blog/images/docker/007-1.png"><p>测试成功，容器关联学习完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我们使用了，&lt;code&gt;IP&lt;/code&gt;和&lt;code&gt;link&lt;/code&gt;方式对容器进行关联。&lt;code&gt;IP&lt;/code&gt;方式不太灵活，但是操作传统比较简单。&lt;code&gt;link&lt;/code&gt; 实际上是 &lt;code&gt;network&lt;/code&gt; 的简单应用，程序更
      
    
    </summary>
    
      <category term="docker" scheme="https://wolferhua.github.io/categories/docker/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://wolferhua.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门教程（七）镜像关联</title>
    <link href="https://wolferhua.github.io/2019/05/22/docker-007/"/>
    <id>https://wolferhua.github.io/2019/05/22/docker-007/</id>
    <published>2019-05-22T05:46:17.000Z</published>
    <updated>2020-02-10T11:07:12.016Z</updated>
    
    <content type="html"><![CDATA[<p>通过之前的内容我们已经成功制作了 <code>nginx</code> 和 <code>go web</code> 的镜像。在实际工作中，我们可能存在多个 <code>go web</code> 分别监听不同的端口，实现了对应的业务。</p><img src="//wolferhua.gitee.io/blog/images/docker/goweb-server.png"><h1 id="启动Goweb"><a href="#启动Goweb" class="headerlink" title="启动Goweb"></a>启动Goweb</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理已经存在的容器</span></span><br><span class="line">docker rm -f goweb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动新容器</span></span><br><span class="line">docker run \</span><br><span class="line">--name goweb \</span><br><span class="line">-d \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">--restart=always \</span><br><span class="line">goweb:scratch</span><br></pre></td></tr></table></figure><h1 id="1-IP关联"><a href="#1-IP关联" class="headerlink" title="1. IP关联"></a>1. IP关联</h1><blockquote><p><code>IP</code>关联逻辑最简单，但是由于docker容器每次申请时获取到的<code>IP</code>都不一样。所以我们就不使用容器的<code>IP</code>转而使用宿主机的<code>IP</code>。</p></blockquote><h2 id="查看容器IP"><a href="#查看容器IP" class="headerlink" title="查看容器IP"></a>查看容器<code>IP</code></h2><blockquote><p>这是只是演示一下，没有具体使用这个IP。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=<span class="string">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> goweb</span><br><span class="line"><span class="comment"># 172.17.0.4</span></span><br></pre></td></tr></table></figure><h2 id="查看宿主机IP"><a href="#查看宿主机IP" class="headerlink" title="查看宿主机IP"></a>查看宿主机IP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">ipconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无线局域网适配器 WLAN:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    连接特定的 DNS 后缀 . . . . . . . :</span></span><br><span class="line"><span class="comment">#    本地链接 IPv6 地址. . . . . . . . : fe80::1cb2:ed82:6180:a0ee%9</span></span><br><span class="line"><span class="comment">#    IPv4 地址 . . . . . . . . . . . . : 192.168.3.159</span></span><br><span class="line"><span class="comment">#    子网掩码  . . . . . . . . . . . . : 255.255.255.0</span></span><br><span class="line"><span class="comment">#    默认网关. . . . . . . . . . . . . : 192.168.3.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#linux &amp; Mac OS</span></span><br><span class="line"><span class="comment">## 传统方式</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">## 新模式</span></span><br><span class="line">ip addr</span><br><span class="line"></span><br><span class="line"><span class="comment">#ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span></span><br><span class="line"><span class="comment">#     link/ether 00:0c:29:f2:ec:58 brd ff:ff:ff:ff:ff:ff</span></span><br><span class="line"><span class="comment">#     inet 192.168.65.128/24 brd 192.168.65.255 scope global dynamic noprefixroute ens33</span></span><br><span class="line"><span class="comment">#        valid_lft 1030sec preferred_lft 1030sec</span></span><br><span class="line"><span class="comment">#     inet 192.168.65.95/24 brd 192.168.65.255 scope global secondary noprefixroute ens33</span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"><span class="comment">#     inet6 fe80::20c:29ff:fef2:ec58/64 scope link dadfailed tentative </span></span><br><span class="line"><span class="comment">#        valid_lft forever preferred_lft forever</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###  192.168.65.95</span></span><br></pre></td></tr></table></figure><h2 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a><code>nginx</code>配置文件</h2><figure class="highlight nginx"><figcaption><span>goweb.conf</span><a href="/downloads/code/docker/007-ip/goweb.conf">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server{</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> www-wh.anycps.com;  </span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host            <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://up-goweb;</span><br><span class="line">        <span class="attribute">chunked_transfer_encoding</span>       <span class="literal">off</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="attribute">upstream</span> up-goweb {</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="comment"># server 127.0.0.1:8080; # 切记这里不能使用  127.0.0.1</span></span><br><span class="line">    <span class="comment"># 因为之前我们说过，容器里边是一个独立的环境，127.0.0.1 代表了当前容器。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用我们之前获取到的宿主机IP</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.65.95:8080</span>; </span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动<code>nginx</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理已经存在的容器</span></span><br><span class="line">docker rm -f nginx80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用新容器</span></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">--name nginx80 \</span><br><span class="line">-d \</span><br><span class="line">-v ~/workspace/www/goweb.conf:/etc/nginx/conf.d/goweb.conf \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--restart=always \</span><br><span class="line">daocloud.io/nginx</span><br></pre></td></tr></table></figure><h2 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h2><p>打开网址：<a href="http://www-wh.anycps.com" target="_blank" rel="noopener">http://www-wh.anycps.com</a></p><img src="//wolferhua.gitee.io/blog/images/docker/007-1.png"><h1 id="2-LINK关联"><a href="#2-LINK关联" class="headerlink" title="2. LINK关联"></a>2. <code>LINK</code>关联</h1><blockquote><p>link 关联已经过时，docker官方已经不推荐使用。该功能可能会在未来某个版本被关闭，请谨慎采用。</p></blockquote><h2 id="nginx配置文件-1"><a href="#nginx配置文件-1" class="headerlink" title="nginx配置文件"></a><code>nginx</code>配置文件</h2><figure class="highlight nginx"><figcaption><span>goweb.conf</span><a href="/downloads/code/docker/007-ip/goweb-link.conf">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server{</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>; </span><br><span class="line">    <span class="attribute">server_name</span> www-wh.anycps.com;  </span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host            <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="comment"># link 模式时直接使用 --link 的名称连接即可</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://goweb:8080;</span><br><span class="line">        <span class="attribute">chunked_transfer_encoding</span>       <span class="literal">off</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># --link 模式不需要这个了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># upstream up-goweb {</span></span><br><span class="line"><span class="comment">#     ip_hash;</span></span><br><span class="line"><span class="comment">#     # server 127.0.0.1:8080; # 切记这里不能使用  127.0.0.1</span></span><br><span class="line"><span class="comment">#     # 因为之前我们说过，容器里边是一个独立的环境，127.0.0.1 代表了当前容器。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     # 使用我们之前获取到的宿主机IP</span></span><br><span class="line"><span class="comment">#     server 192.168.65.95:8080; </span></span><br><span class="line"><span class="comment"># }</span></span><br></pre></td></tr></table></figure><h2 id="启动nginx-1"><a href="#启动nginx-1" class="headerlink" title="启动nginx"></a>启动<code>nginx</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理已经存在的容器</span></span><br><span class="line">docker rm -f nginx80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用新容器</span></span><br><span class="line"><span class="comment"># 容器启动基本没有区别，不同的是新增加了 --link 选项</span></span><br><span class="line"><span class="comment"># --link &lt;name or id&gt;[:alias]</span></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">--name nginx80 \</span><br><span class="line">--link goweb:goweb \</span><br><span class="line">-d \</span><br><span class="line">-v ~/workspace/www/goweb.conf:/etc/nginx/conf.d/goweb.conf \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--restart=always \</span><br><span class="line">daocloud.io/nginx</span><br></pre></td></tr></table></figure><h2 id="测试访问-1"><a href="#测试访问-1" class="headerlink" title="测试访问"></a>测试访问</h2><p>打开网址：<a href="http://www-wh.anycps.com" target="_blank" rel="noopener">http://www-wh.anycps.com</a></p><img src="//wolferhua.gitee.io/blog/images/docker/007-1.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过之前的内容我们已经成功制作了 &lt;code&gt;nginx&lt;/code&gt; 和 &lt;code&gt;go web&lt;/code&gt; 的镜像。在实际工作中，我们可能存在多个 &lt;code&gt;go web&lt;/code&gt; 分别监听不同的端口，实现了对应的业务。&lt;/p&gt;
&lt;img src=&quot;//wol
      
    
    </summary>
    
      <category term="docker" scheme="https://wolferhua.github.io/categories/docker/"/>
    
    
      <category term="linux" scheme="https://wolferhua.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://wolferhua.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
