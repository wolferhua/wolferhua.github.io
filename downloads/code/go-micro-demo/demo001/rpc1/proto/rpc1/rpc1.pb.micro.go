// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rpc1.proto

package rpc1

import (
	fmt "fmt"
	math "math"

	srv1 "gitee.com/wolferhua/go-micro-demo/demo001/rpc1/proto/srv1"
	proto "github.com/golang/protobuf/proto"

	context "context"

	client "github.com/micro/go-micro/v2/client"

	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Rpc1 service

type Rpc1Service interface {
	Say(ctx context.Context, in *srv1.HelloRequest, opts ...client.CallOption) (*srv1.HelloResponse, error)
}

type rpc1Service struct {
	c    client.Client
	name string
}

func NewRpc1Service(name string, c client.Client) Rpc1Service {
	return &rpc1Service{
		c:    c,
		name: name,
	}
}

func (c *rpc1Service) Say(ctx context.Context, in *srv1.HelloRequest, opts ...client.CallOption) (*srv1.HelloResponse, error) {
	req := c.c.NewRequest(c.name, "Rpc1.Say", in)
	out := new(srv1.HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc1 service

type Rpc1Handler interface {
	Say(context.Context, *srv1.HelloRequest, *srv1.HelloResponse) error
}

func RegisterRpc1Handler(s server.Server, hdlr Rpc1Handler, opts ...server.HandlerOption) error {
	type rpc1 interface {
		Say(ctx context.Context, in *srv1.HelloRequest, out *srv1.HelloResponse) error
	}
	type Rpc1 struct {
		rpc1
	}
	h := &rpc1Handler{hdlr}
	return s.Handle(s.NewHandler(&Rpc1{h}, opts...))
}

type rpc1Handler struct {
	Rpc1Handler
}

func (h *rpc1Handler) Say(ctx context.Context, in *srv1.HelloRequest, out *srv1.HelloResponse) error {
	return h.Rpc1Handler.Say(ctx, in, out)
}
